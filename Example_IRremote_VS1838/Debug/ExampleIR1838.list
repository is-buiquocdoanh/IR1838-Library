
ExampleIR1838.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000089c  080044ec  080044ec  000054ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d88  08004d88  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004d88  08004d88  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004d88  08004d88  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d88  08004d88  00005d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d8c  08004d8c  00005d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004d90  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000068  08004df8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  08004df8  000066d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcd5  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ce  00000000  00000000  00015d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  00018138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9c  00000000  00000000  00019148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001937d  00000000  00000000  00019de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f07  00000000  00000000  00033161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6cc  00000000  00000000  00046068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5734  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d64  00000000  00000000  000d5778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000da4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080044d4 	.word	0x080044d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080044d4 	.word	0x080044d4

0800014c <IR1838_Init>:

uint32_t IR_Code = 0;
uint8_t IR_Ready = 0;
static uint8_t bit_count = 0;

void IR1838_Init(TIM_HandleTypeDef *htim, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4613      	mov	r3, r2
 8000158:	80fb      	strh	r3, [r7, #6]
    ir_htim = htim;
 800015a:	4a0b      	ldr	r2, [pc, #44]	@ (8000188 <IR1838_Init+0x3c>)
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	6013      	str	r3, [r2, #0]
    ir_GPIO_Port = GPIOx;
 8000160:	4a0a      	ldr	r2, [pc, #40]	@ (800018c <IR1838_Init+0x40>)
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	6013      	str	r3, [r2, #0]
    ir_GPIO_Pin = GPIO_Pin;
 8000166:	4a0a      	ldr	r2, [pc, #40]	@ (8000190 <IR1838_Init+0x44>)
 8000168:	88fb      	ldrh	r3, [r7, #6]
 800016a:	8013      	strh	r3, [r2, #0]
    HAL_TIM_Base_Start(ir_htim);
 800016c:	4b06      	ldr	r3, [pc, #24]	@ (8000188 <IR1838_Init+0x3c>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	4618      	mov	r0, r3
 8000172:	f002 fba9 	bl	80028c8 <HAL_TIM_Base_Start>
    __HAL_TIM_SET_COUNTER(ir_htim, 0);
 8000176:	4b04      	ldr	r3, [pc, #16]	@ (8000188 <IR1838_Init+0x3c>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	2200      	movs	r2, #0
 800017e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000180:	bf00      	nop
 8000182:	3710      	adds	r7, #16
 8000184:	46bd      	mov	sp, r7
 8000186:	bd80      	pop	{r7, pc}
 8000188:	20000084 	.word	0x20000084
 800018c:	20000088 	.word	0x20000088
 8000190:	2000008c 	.word	0x2000008c

08000194 <IR1838_EXTI_Callback>:

void IR1838_EXTI_Callback(uint16_t GPIO_Pin) {
 8000194:	b580      	push	{r7, lr}
 8000196:	b084      	sub	sp, #16
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin != ir_GPIO_Pin) return;
 800019e:	4b31      	ldr	r3, [pc, #196]	@ (8000264 <IR1838_EXTI_Callback+0xd0>)
 80001a0:	881b      	ldrh	r3, [r3, #0]
 80001a2:	88fa      	ldrh	r2, [r7, #6]
 80001a4:	429a      	cmp	r2, r3
 80001a6:	d159      	bne.n	800025c <IR1838_EXTI_Callback+0xc8>

    uint32_t pulse = __HAL_TIM_GET_COUNTER(ir_htim);
 80001a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000268 <IR1838_EXTI_Callback+0xd4>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80001b0:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COUNTER(ir_htim, 0);
 80001b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000268 <IR1838_EXTI_Callback+0xd4>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	2200      	movs	r2, #0
 80001ba:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_GPIO_ReadPin(ir_GPIO_Port, ir_GPIO_Pin) == GPIO_PIN_SET) {
 80001bc:	4b2b      	ldr	r3, [pc, #172]	@ (800026c <IR1838_EXTI_Callback+0xd8>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a28      	ldr	r2, [pc, #160]	@ (8000264 <IR1838_EXTI_Callback+0xd0>)
 80001c2:	8812      	ldrh	r2, [r2, #0]
 80001c4:	4611      	mov	r1, r2
 80001c6:	4618      	mov	r0, r3
 80001c8:	f001 fa42 	bl	8001650 <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d110      	bne.n	80001f4 <IR1838_EXTI_Callback+0x60>
        // HIGH: waiting for LOW pulse
        if (pulse > 8500 && pulse < 9500) {
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	f242 1234 	movw	r2, #8500	@ 0x2134
 80001d8:	4293      	cmp	r3, r2
 80001da:	d940      	bls.n	800025e <IR1838_EXTI_Callback+0xca>
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	f242 521b 	movw	r2, #9499	@ 0x251b
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d83b      	bhi.n	800025e <IR1838_EXTI_Callback+0xca>
            IR_Code = 0;
 80001e6:	4b22      	ldr	r3, [pc, #136]	@ (8000270 <IR1838_EXTI_Callback+0xdc>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
            bit_count = 0;
 80001ec:	4b21      	ldr	r3, [pc, #132]	@ (8000274 <IR1838_EXTI_Callback+0xe0>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	701a      	strb	r2, [r3, #0]
 80001f2:	e034      	b.n	800025e <IR1838_EXTI_Callback+0xca>
        }
    } else {
        // LOW: check for bit 0/1
        if (pulse > 1400 && pulse < 1800) {
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 80001fa:	d911      	bls.n	8000220 <IR1838_EXTI_Callback+0x8c>
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8000202:	d20d      	bcs.n	8000220 <IR1838_EXTI_Callback+0x8c>
            // Bit 1
            IR_Code = (IR_Code << 1) | 1;
 8000204:	4b1a      	ldr	r3, [pc, #104]	@ (8000270 <IR1838_EXTI_Callback+0xdc>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	005b      	lsls	r3, r3, #1
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	4a18      	ldr	r2, [pc, #96]	@ (8000270 <IR1838_EXTI_Callback+0xdc>)
 8000210:	6013      	str	r3, [r2, #0]
            bit_count++;
 8000212:	4b18      	ldr	r3, [pc, #96]	@ (8000274 <IR1838_EXTI_Callback+0xe0>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	3301      	adds	r3, #1
 8000218:	b2da      	uxtb	r2, r3
 800021a:	4b16      	ldr	r3, [pc, #88]	@ (8000274 <IR1838_EXTI_Callback+0xe0>)
 800021c:	701a      	strb	r2, [r3, #0]
 800021e:	e012      	b.n	8000246 <IR1838_EXTI_Callback+0xb2>
        } else if (pulse > 400 && pulse < 700) {
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000226:	d90e      	bls.n	8000246 <IR1838_EXTI_Callback+0xb2>
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800022e:	d20a      	bcs.n	8000246 <IR1838_EXTI_Callback+0xb2>
            // Bit 0
            IR_Code = (IR_Code << 1);
 8000230:	4b0f      	ldr	r3, [pc, #60]	@ (8000270 <IR1838_EXTI_Callback+0xdc>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	005b      	lsls	r3, r3, #1
 8000236:	4a0e      	ldr	r2, [pc, #56]	@ (8000270 <IR1838_EXTI_Callback+0xdc>)
 8000238:	6013      	str	r3, [r2, #0]
            bit_count++;
 800023a:	4b0e      	ldr	r3, [pc, #56]	@ (8000274 <IR1838_EXTI_Callback+0xe0>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	3301      	adds	r3, #1
 8000240:	b2da      	uxtb	r2, r3
 8000242:	4b0c      	ldr	r3, [pc, #48]	@ (8000274 <IR1838_EXTI_Callback+0xe0>)
 8000244:	701a      	strb	r2, [r3, #0]
        }

        if (bit_count >= 32) {
 8000246:	4b0b      	ldr	r3, [pc, #44]	@ (8000274 <IR1838_EXTI_Callback+0xe0>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2b1f      	cmp	r3, #31
 800024c:	d907      	bls.n	800025e <IR1838_EXTI_Callback+0xca>
            IR_Ready = 1;
 800024e:	4b0a      	ldr	r3, [pc, #40]	@ (8000278 <IR1838_EXTI_Callback+0xe4>)
 8000250:	2201      	movs	r2, #1
 8000252:	701a      	strb	r2, [r3, #0]
//            printf("IR Code: 0x%08lX\r\n", IR_Code);
            bit_count = 0;
 8000254:	4b07      	ldr	r3, [pc, #28]	@ (8000274 <IR1838_EXTI_Callback+0xe0>)
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
 800025a:	e000      	b.n	800025e <IR1838_EXTI_Callback+0xca>
    if (GPIO_Pin != ir_GPIO_Pin) return;
 800025c:	bf00      	nop
        }
    }
}
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	2000008c 	.word	0x2000008c
 8000268:	20000084 	.word	0x20000084
 800026c:	20000088 	.word	0x20000088
 8000270:	20000090 	.word	0x20000090
 8000274:	20000095 	.word	0x20000095
 8000278:	20000094 	.word	0x20000094

0800027c <IR1838_Decode>:

const char* IR1838_Decode(uint32_t code) {
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
    switch (code) {
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a57      	ldr	r2, [pc, #348]	@ (80003e4 <IR1838_Decode+0x168>)
 8000288:	4293      	cmp	r3, r2
 800028a:	f000 8086 	beq.w	800039a <IR1838_Decode+0x11e>
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a54      	ldr	r2, [pc, #336]	@ (80003e4 <IR1838_Decode+0x168>)
 8000292:	4293      	cmp	r3, r2
 8000294:	f200 809f 	bhi.w	80003d6 <IR1838_Decode+0x15a>
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4a53      	ldr	r2, [pc, #332]	@ (80003e8 <IR1838_Decode+0x16c>)
 800029c:	4293      	cmp	r3, r2
 800029e:	f000 8084 	beq.w	80003aa <IR1838_Decode+0x12e>
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a50      	ldr	r2, [pc, #320]	@ (80003e8 <IR1838_Decode+0x16c>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	f200 8095 	bhi.w	80003d6 <IR1838_Decode+0x15a>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a4f      	ldr	r2, [pc, #316]	@ (80003ec <IR1838_Decode+0x170>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d078      	beq.n	80003a6 <IR1838_Decode+0x12a>
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a4d      	ldr	r2, [pc, #308]	@ (80003ec <IR1838_Decode+0x170>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	f200 808c 	bhi.w	80003d6 <IR1838_Decode+0x15a>
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a4b      	ldr	r2, [pc, #300]	@ (80003f0 <IR1838_Decode+0x174>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d07b      	beq.n	80003be <IR1838_Decode+0x142>
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a49      	ldr	r2, [pc, #292]	@ (80003f0 <IR1838_Decode+0x174>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	f200 8083 	bhi.w	80003d6 <IR1838_Decode+0x15a>
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a48      	ldr	r2, [pc, #288]	@ (80003f4 <IR1838_Decode+0x178>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d06a      	beq.n	80003ae <IR1838_Decode+0x132>
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a46      	ldr	r2, [pc, #280]	@ (80003f4 <IR1838_Decode+0x178>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d87a      	bhi.n	80003d6 <IR1838_Decode+0x15a>
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a45      	ldr	r2, [pc, #276]	@ (80003f8 <IR1838_Decode+0x17c>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d054      	beq.n	8000392 <IR1838_Decode+0x116>
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a43      	ldr	r2, [pc, #268]	@ (80003f8 <IR1838_Decode+0x17c>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d872      	bhi.n	80003d6 <IR1838_Decode+0x15a>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a42      	ldr	r2, [pc, #264]	@ (80003fc <IR1838_Decode+0x180>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d05e      	beq.n	80003b6 <IR1838_Decode+0x13a>
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a40      	ldr	r2, [pc, #256]	@ (80003fc <IR1838_Decode+0x180>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d86a      	bhi.n	80003d6 <IR1838_Decode+0x15a>
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a3f      	ldr	r2, [pc, #252]	@ (8000400 <IR1838_Decode+0x184>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d054      	beq.n	80003b2 <IR1838_Decode+0x136>
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a3d      	ldr	r2, [pc, #244]	@ (8000400 <IR1838_Decode+0x184>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d862      	bhi.n	80003d6 <IR1838_Decode+0x15a>
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a3c      	ldr	r2, [pc, #240]	@ (8000404 <IR1838_Decode+0x188>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d050      	beq.n	80003ba <IR1838_Decode+0x13e>
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a3a      	ldr	r2, [pc, #232]	@ (8000404 <IR1838_Decode+0x188>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d85a      	bhi.n	80003d6 <IR1838_Decode+0x15a>
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a39      	ldr	r2, [pc, #228]	@ (8000408 <IR1838_Decode+0x18c>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d036      	beq.n	8000396 <IR1838_Decode+0x11a>
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a37      	ldr	r2, [pc, #220]	@ (8000408 <IR1838_Decode+0x18c>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d852      	bhi.n	80003d6 <IR1838_Decode+0x15a>
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a36      	ldr	r2, [pc, #216]	@ (800040c <IR1838_Decode+0x190>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d04c      	beq.n	80003d2 <IR1838_Decode+0x156>
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a34      	ldr	r2, [pc, #208]	@ (800040c <IR1838_Decode+0x190>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d84a      	bhi.n	80003d6 <IR1838_Decode+0x15a>
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a33      	ldr	r2, [pc, #204]	@ (8000410 <IR1838_Decode+0x194>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d040      	beq.n	80003ca <IR1838_Decode+0x14e>
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a31      	ldr	r2, [pc, #196]	@ (8000410 <IR1838_Decode+0x194>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d842      	bhi.n	80003d6 <IR1838_Decode+0x15a>
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a30      	ldr	r2, [pc, #192]	@ (8000414 <IR1838_Decode+0x198>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d034      	beq.n	80003c2 <IR1838_Decode+0x146>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a2e      	ldr	r2, [pc, #184]	@ (8000414 <IR1838_Decode+0x198>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d83a      	bhi.n	80003d6 <IR1838_Decode+0x15a>
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a2d      	ldr	r2, [pc, #180]	@ (8000418 <IR1838_Decode+0x19c>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d01a      	beq.n	800039e <IR1838_Decode+0x122>
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a2b      	ldr	r2, [pc, #172]	@ (8000418 <IR1838_Decode+0x19c>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d832      	bhi.n	80003d6 <IR1838_Decode+0x15a>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a2a      	ldr	r2, [pc, #168]	@ (800041c <IR1838_Decode+0x1a0>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d026      	beq.n	80003c6 <IR1838_Decode+0x14a>
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a28      	ldr	r2, [pc, #160]	@ (800041c <IR1838_Decode+0x1a0>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d82a      	bhi.n	80003d6 <IR1838_Decode+0x15a>
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a27      	ldr	r2, [pc, #156]	@ (8000420 <IR1838_Decode+0x1a4>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d00c      	beq.n	80003a2 <IR1838_Decode+0x126>
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a26      	ldr	r2, [pc, #152]	@ (8000424 <IR1838_Decode+0x1a8>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d01e      	beq.n	80003ce <IR1838_Decode+0x152>
 8000390:	e021      	b.n	80003d6 <IR1838_Decode+0x15a>
        case 0x00FFA25D: return "1";
 8000392:	4b25      	ldr	r3, [pc, #148]	@ (8000428 <IR1838_Decode+0x1ac>)
 8000394:	e020      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FF629D: return "2";
 8000396:	4b25      	ldr	r3, [pc, #148]	@ (800042c <IR1838_Decode+0x1b0>)
 8000398:	e01e      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FFE21D: return "3";
 800039a:	4b25      	ldr	r3, [pc, #148]	@ (8000430 <IR1838_Decode+0x1b4>)
 800039c:	e01c      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FF22DD: return "4";
 800039e:	4b25      	ldr	r3, [pc, #148]	@ (8000434 <IR1838_Decode+0x1b8>)
 80003a0:	e01a      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FF02FD: return "5";
 80003a2:	4b25      	ldr	r3, [pc, #148]	@ (8000438 <IR1838_Decode+0x1bc>)
 80003a4:	e018      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FFC23D: return "6";
 80003a6:	4b25      	ldr	r3, [pc, #148]	@ (800043c <IR1838_Decode+0x1c0>)
 80003a8:	e016      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FFE01F: return "7";
 80003aa:	4b25      	ldr	r3, [pc, #148]	@ (8000440 <IR1838_Decode+0x1c4>)
 80003ac:	e014      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FFA857: return "8";
 80003ae:	4b25      	ldr	r3, [pc, #148]	@ (8000444 <IR1838_Decode+0x1c8>)
 80003b0:	e012      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FF906F: return "9";
 80003b2:	4b25      	ldr	r3, [pc, #148]	@ (8000448 <IR1838_Decode+0x1cc>)
 80003b4:	e010      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FF9867: return "0";
 80003b6:	4b25      	ldr	r3, [pc, #148]	@ (800044c <IR1838_Decode+0x1d0>)
 80003b8:	e00e      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FF6897: return "*";
 80003ba:	4b25      	ldr	r3, [pc, #148]	@ (8000450 <IR1838_Decode+0x1d4>)
 80003bc:	e00c      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FFB04F: return "#";
 80003be:	4b25      	ldr	r3, [pc, #148]	@ (8000454 <IR1838_Decode+0x1d8>)
 80003c0:	e00a      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FF38C7: return "OK";
 80003c2:	4b25      	ldr	r3, [pc, #148]	@ (8000458 <IR1838_Decode+0x1dc>)
 80003c4:	e008      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FF18E7: return "UP";
 80003c6:	4b25      	ldr	r3, [pc, #148]	@ (800045c <IR1838_Decode+0x1e0>)
 80003c8:	e006      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FF4AB5: return "DOWN";
 80003ca:	4b25      	ldr	r3, [pc, #148]	@ (8000460 <IR1838_Decode+0x1e4>)
 80003cc:	e004      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FF10EF: return "LEFT";
 80003ce:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <IR1838_Decode+0x1e8>)
 80003d0:	e002      	b.n	80003d8 <IR1838_Decode+0x15c>
        case 0x00FF5AA5: return "RIGHT";
 80003d2:	4b25      	ldr	r3, [pc, #148]	@ (8000468 <IR1838_Decode+0x1ec>)
 80003d4:	e000      	b.n	80003d8 <IR1838_Decode+0x15c>
        default: return "UNKNOWN";
 80003d6:	4b25      	ldr	r3, [pc, #148]	@ (800046c <IR1838_Decode+0x1f0>)
    }
}
 80003d8:	4618      	mov	r0, r3
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	00ffe21d 	.word	0x00ffe21d
 80003e8:	00ffe01f 	.word	0x00ffe01f
 80003ec:	00ffc23d 	.word	0x00ffc23d
 80003f0:	00ffb04f 	.word	0x00ffb04f
 80003f4:	00ffa857 	.word	0x00ffa857
 80003f8:	00ffa25d 	.word	0x00ffa25d
 80003fc:	00ff9867 	.word	0x00ff9867
 8000400:	00ff906f 	.word	0x00ff906f
 8000404:	00ff6897 	.word	0x00ff6897
 8000408:	00ff629d 	.word	0x00ff629d
 800040c:	00ff5aa5 	.word	0x00ff5aa5
 8000410:	00ff4ab5 	.word	0x00ff4ab5
 8000414:	00ff38c7 	.word	0x00ff38c7
 8000418:	00ff22dd 	.word	0x00ff22dd
 800041c:	00ff18e7 	.word	0x00ff18e7
 8000420:	00ff02fd 	.word	0x00ff02fd
 8000424:	00ff10ef 	.word	0x00ff10ef
 8000428:	080044ec 	.word	0x080044ec
 800042c:	080044f0 	.word	0x080044f0
 8000430:	080044f4 	.word	0x080044f4
 8000434:	080044f8 	.word	0x080044f8
 8000438:	080044fc 	.word	0x080044fc
 800043c:	08004500 	.word	0x08004500
 8000440:	08004504 	.word	0x08004504
 8000444:	08004508 	.word	0x08004508
 8000448:	0800450c 	.word	0x0800450c
 800044c:	08004510 	.word	0x08004510
 8000450:	08004514 	.word	0x08004514
 8000454:	08004518 	.word	0x08004518
 8000458:	0800451c 	.word	0x0800451c
 800045c:	08004520 	.word	0x08004520
 8000460:	08004524 	.word	0x08004524
 8000464:	0800452c 	.word	0x0800452c
 8000468:	08004534 	.word	0x08004534
 800046c:	0800453c 	.word	0x0800453c

08000470 <_write>:
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	b29a      	uxth	r2, r3
 8000480:	f04f 33ff 	mov.w	r3, #4294967295
 8000484:	68b9      	ldr	r1, [r7, #8]
 8000486:	4804      	ldr	r0, [pc, #16]	@ (8000498 <_write+0x28>)
 8000488:	f002 fce2 	bl	8002e50 <HAL_UART_Transmit>
    return len;
 800048c:	687b      	ldr	r3, [r7, #4]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000134 	.word	0x20000134

0800049c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Pass EXTI callback to library
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	80fb      	strh	r3, [r7, #6]
    IR1838_EXTI_Callback(GPIO_Pin);
 80004a6:	88fb      	ldrh	r3, [r7, #6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff fe73 	bl	8000194 <IR1838_EXTI_Callback>
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fdaf 	bl	8001020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f87b 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f967 	bl	8000798 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ca:	f000 f8bd 	bl	8000648 <MX_I2C1_Init>
  MX_TIM1_Init();
 80004ce:	f000 f8e9 	bl	80006a4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80004d2:	f000 f937 	bl	8000744 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	// Init IR1838
	IR1838_Init(&htim1, GPIOA, GPIO_PIN_2);
 80004d6:	2204      	movs	r2, #4
 80004d8:	492d      	ldr	r1, [pc, #180]	@ (8000590 <main+0xd8>)
 80004da:	482e      	ldr	r0, [pc, #184]	@ (8000594 <main+0xdc>)
 80004dc:	f7ff fe36 	bl	800014c <IR1838_Init>
	printf("=== IR Receiver Library Test ===\r\n");
 80004e0:	482d      	ldr	r0, [pc, #180]	@ (8000598 <main+0xe0>)
 80004e2:	f002 ffb3 	bl	800344c <puts>

	// Init SSD1306
	ssd1306_Init();
 80004e6:	f000 f9e1 	bl	80008ac <ssd1306_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (IR_Ready) {
 80004ea:	4b2c      	ldr	r3, [pc, #176]	@ (800059c <main+0xe4>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d04a      	beq.n	8000588 <main+0xd0>
		        const char* btn = IR1838_Decode(IR_Code);
 80004f2:	4b2b      	ldr	r3, [pc, #172]	@ (80005a0 <main+0xe8>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff fec0 	bl	800027c <IR1838_Decode>
 80004fc:	6178      	str	r0, [r7, #20]

		        // In ra UART
		        printf("Button: %s | Code: 0x%08lX\r\n", btn, IR_Code);
 80004fe:	4b28      	ldr	r3, [pc, #160]	@ (80005a0 <main+0xe8>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	461a      	mov	r2, r3
 8000504:	6979      	ldr	r1, [r7, #20]
 8000506:	4827      	ldr	r0, [pc, #156]	@ (80005a4 <main+0xec>)
 8000508:	f002 ff38 	bl	800337c <iprintf>

		        // Xóa màn hình
		        ssd1306_Fill(Black);
 800050c:	2000      	movs	r0, #0
 800050e:	f000 fa37 	bl	8000980 <ssd1306_Fill>

		        // Hiển thị text
		        ssd1306_SetCursor(0, 0);
 8000512:	2100      	movs	r1, #0
 8000514:	2000      	movs	r0, #0
 8000516:	f000 fb7d 	bl	8000c14 <ssd1306_SetCursor>
		        ssd1306_WriteString("IR Remote", Font_7x10, White);
 800051a:	4b23      	ldr	r3, [pc, #140]	@ (80005a8 <main+0xf0>)
 800051c:	2201      	movs	r2, #1
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000522:	4822      	ldr	r0, [pc, #136]	@ (80005ac <main+0xf4>)
 8000524:	f000 fb50 	bl	8000bc8 <ssd1306_WriteString>

		        ssd1306_SetCursor(0, 15);
 8000528:	210f      	movs	r1, #15
 800052a:	2000      	movs	r0, #0
 800052c:	f000 fb72 	bl	8000c14 <ssd1306_SetCursor>
		        ssd1306_WriteString("Button: ", Font_7x10, White);
 8000530:	4b1d      	ldr	r3, [pc, #116]	@ (80005a8 <main+0xf0>)
 8000532:	2201      	movs	r2, #1
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000538:	481d      	ldr	r0, [pc, #116]	@ (80005b0 <main+0xf8>)
 800053a:	f000 fb45 	bl	8000bc8 <ssd1306_WriteString>
		        ssd1306_WriteString((char*)btn, Font_7x10, White);
 800053e:	4b1a      	ldr	r3, [pc, #104]	@ (80005a8 <main+0xf0>)
 8000540:	2201      	movs	r2, #1
 8000542:	9200      	str	r2, [sp, #0]
 8000544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000546:	6978      	ldr	r0, [r7, #20]
 8000548:	f000 fb3e 	bl	8000bc8 <ssd1306_WriteString>

		        ssd1306_SetCursor(0, 30);
 800054c:	211e      	movs	r1, #30
 800054e:	2000      	movs	r0, #0
 8000550:	f000 fb60 	bl	8000c14 <ssd1306_SetCursor>
		        ssd1306_WriteString("Code: ", Font_7x10, White);
 8000554:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <main+0xf0>)
 8000556:	2201      	movs	r2, #1
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800055c:	4815      	ldr	r0, [pc, #84]	@ (80005b4 <main+0xfc>)
 800055e:	f000 fb33 	bl	8000bc8 <ssd1306_WriteString>

		        char codeStr[15];
		        sprintf(codeStr, "0x%08lX", IR_Code);
 8000562:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <main+0xe8>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	4913      	ldr	r1, [pc, #76]	@ (80005b8 <main+0x100>)
 800056a:	4618      	mov	r0, r3
 800056c:	f002 ff76 	bl	800345c <siprintf>
		        ssd1306_WriteString(codeStr, Font_7x10, White);
 8000570:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <main+0xf0>)
 8000572:	1d38      	adds	r0, r7, #4
 8000574:	2201      	movs	r2, #1
 8000576:	9200      	str	r2, [sp, #0]
 8000578:	cb0e      	ldmia	r3, {r1, r2, r3}
 800057a:	f000 fb25 	bl	8000bc8 <ssd1306_WriteString>

		        // Cập nhật màn hình
		        ssd1306_UpdateScreen();
 800057e:	f000 fa17 	bl	80009b0 <ssd1306_UpdateScreen>

		        // Reset flag để nhận lần tiếp theo
		        IR_Ready = 0;
 8000582:	4b06      	ldr	r3, [pc, #24]	@ (800059c <main+0xe4>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
		    }

		    HAL_Delay(50);
 8000588:	2032      	movs	r0, #50	@ 0x32
 800058a:	f000 fdab 	bl	80010e4 <HAL_Delay>
		if (IR_Ready) {
 800058e:	e7ac      	b.n	80004ea <main+0x32>
 8000590:	40010800 	.word	0x40010800
 8000594:	200000ec 	.word	0x200000ec
 8000598:	08004544 	.word	0x08004544
 800059c:	20000094 	.word	0x20000094
 80005a0:	20000090 	.word	0x20000090
 80005a4:	08004568 	.word	0x08004568
 80005a8:	08004d1c 	.word	0x08004d1c
 80005ac:	08004588 	.word	0x08004588
 80005b0:	08004594 	.word	0x08004594
 80005b4:	080045a0 	.word	0x080045a0
 80005b8:	080045a8 	.word	0x080045a8

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b090      	sub	sp, #64	@ 0x40
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	2228      	movs	r2, #40	@ 0x28
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 f85a 	bl	8003684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f0:	2302      	movs	r3, #2
 80005f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005fa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0318 	add.w	r3, r7, #24
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fcff 	bl	8002008 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000610:	f000 f90e 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2102      	movs	r1, #2
 800062e:	4618      	mov	r0, r3
 8000630:	f001 ff6c 	bl	800250c <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800063a:	f000 f8f9 	bl	8000830 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3740      	adds	r7, #64	@ 0x40
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_I2C1_Init+0x50>)
 800064e:	4a13      	ldr	r2, [pc, #76]	@ (800069c <MX_I2C1_Init+0x54>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_I2C1_Init+0x50>)
 8000654:	4a12      	ldr	r2, [pc, #72]	@ (80006a0 <MX_I2C1_Init+0x58>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000658:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800065e:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000664:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <MX_I2C1_Init+0x50>)
 8000666:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800066a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	@ (8000698 <MX_I2C1_Init+0x50>)
 8000686:	f001 f813 	bl	80016b0 <HAL_I2C_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000690:	f000 f8ce 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000098 	.word	0x20000098
 800069c:	40005400 	.word	0x40005400
 80006a0:	000186a0 	.word	0x000186a0

080006a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b8:	463b      	mov	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	@ (800073c <MX_TIM1_Init+0x98>)
 80006c2:	4a1f      	ldr	r2, [pc, #124]	@ (8000740 <MX_TIM1_Init+0x9c>)
 80006c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <MX_TIM1_Init+0x98>)
 80006c8:	2247      	movs	r2, #71	@ 0x47
 80006ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <MX_TIM1_Init+0x98>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_TIM1_Init+0x98>)
 80006d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006da:	4b18      	ldr	r3, [pc, #96]	@ (800073c <MX_TIM1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006e0:	4b16      	ldr	r3, [pc, #88]	@ (800073c <MX_TIM1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_TIM1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006ec:	4813      	ldr	r0, [pc, #76]	@ (800073c <MX_TIM1_Init+0x98>)
 80006ee:	f002 f89b 	bl	8002828 <HAL_TIM_Base_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006f8:	f000 f89a 	bl	8000830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000700:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	4619      	mov	r1, r3
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <MX_TIM1_Init+0x98>)
 800070a:	f002 f927 	bl	800295c <HAL_TIM_ConfigClockSource>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000714:	f000 f88c 	bl	8000830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_TIM1_Init+0x98>)
 8000726:	f002 fae5 	bl	8002cf4 <HAL_TIMEx_MasterConfigSynchronization>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000730:	f000 f87e 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000ec 	.word	0x200000ec
 8000740:	40012c00 	.word	0x40012c00

08000744 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_USART1_UART_Init+0x4c>)
 800074a:	4a12      	ldr	r2, [pc, #72]	@ (8000794 <MX_USART1_UART_Init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <MX_USART1_UART_Init+0x4c>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_USART1_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_USART1_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_USART1_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_USART1_UART_Init+0x4c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <MX_USART1_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_USART1_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_USART1_UART_Init+0x4c>)
 800077c:	f002 fb18 	bl	8002db0 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000786:	f000 f853 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000134 	.word	0x20000134
 8000794:	40013800 	.word	0x40013800

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007b2:	f043 0320 	orr.w	r3, r3, #32
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0320 	and.w	r3, r3, #32
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a16      	ldr	r2, [pc, #88]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007e2:	f043 0308 	orr.w	r3, r3, #8
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_GPIO_Init+0x8c>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007f4:	2304      	movs	r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_GPIO_Init+0x90>)
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	4809      	ldr	r0, [pc, #36]	@ (800082c <MX_GPIO_Init+0x94>)
 8000808:	f000 fd9e 	bl	8001348 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	2008      	movs	r0, #8
 8000812:	f000 fd62 	bl	80012da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000816:	2008      	movs	r0, #8
 8000818:	f000 fd7b 	bl	8001312 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40021000 	.word	0x40021000
 8000828:	10310000 	.word	0x10310000
 800082c:	40010800 	.word	0x40010800

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <Error_Handler+0x8>

0800083c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af04      	add	r7, sp, #16
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	9302      	str	r3, [sp, #8]
 8000858:	2301      	movs	r3, #1
 800085a:	9301      	str	r3, [sp, #4]
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	2301      	movs	r3, #1
 8000862:	2200      	movs	r2, #0
 8000864:	2178      	movs	r1, #120	@ 0x78
 8000866:	4803      	ldr	r0, [pc, #12]	@ (8000874 <ssd1306_WriteCommand+0x2c>)
 8000868:	f001 f866 	bl	8001938 <HAL_I2C_Mem_Write>
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000098 	.word	0x20000098

08000878 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af04      	add	r7, sp, #16
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	b29b      	uxth	r3, r3
 8000886:	f04f 32ff 	mov.w	r2, #4294967295
 800088a:	9202      	str	r2, [sp, #8]
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2301      	movs	r3, #1
 8000894:	2240      	movs	r2, #64	@ 0x40
 8000896:	2178      	movs	r1, #120	@ 0x78
 8000898:	4803      	ldr	r0, [pc, #12]	@ (80008a8 <ssd1306_WriteData+0x30>)
 800089a:	f001 f84d 	bl	8001938 <HAL_I2C_Mem_Write>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000098 	.word	0x20000098

080008ac <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80008b0:	f7ff ffc4 	bl	800083c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80008b4:	2064      	movs	r0, #100	@ 0x64
 80008b6:	f000 fc15 	bl	80010e4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 f9d6 	bl	8000c6c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80008c0:	2020      	movs	r0, #32
 80008c2:	f7ff ffc1 	bl	8000848 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ffbe 	bl	8000848 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80008cc:	20b0      	movs	r0, #176	@ 0xb0
 80008ce:	f7ff ffbb 	bl	8000848 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80008d2:	20c8      	movs	r0, #200	@ 0xc8
 80008d4:	f7ff ffb8 	bl	8000848 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80008d8:	2000      	movs	r0, #0
 80008da:	f7ff ffb5 	bl	8000848 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80008de:	2010      	movs	r0, #16
 80008e0:	f7ff ffb2 	bl	8000848 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80008e4:	2040      	movs	r0, #64	@ 0x40
 80008e6:	f7ff ffaf 	bl	8000848 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80008ea:	20ff      	movs	r0, #255	@ 0xff
 80008ec:	f000 f9aa 	bl	8000c44 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80008f0:	20a1      	movs	r0, #161	@ 0xa1
 80008f2:	f7ff ffa9 	bl	8000848 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80008f6:	20a6      	movs	r0, #166	@ 0xa6
 80008f8:	f7ff ffa6 	bl	8000848 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80008fc:	20a8      	movs	r0, #168	@ 0xa8
 80008fe:	f7ff ffa3 	bl	8000848 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000902:	203f      	movs	r0, #63	@ 0x3f
 8000904:	f7ff ffa0 	bl	8000848 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000908:	20a4      	movs	r0, #164	@ 0xa4
 800090a:	f7ff ff9d 	bl	8000848 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800090e:	20d3      	movs	r0, #211	@ 0xd3
 8000910:	f7ff ff9a 	bl	8000848 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff ff97 	bl	8000848 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800091a:	20d5      	movs	r0, #213	@ 0xd5
 800091c:	f7ff ff94 	bl	8000848 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000920:	20f0      	movs	r0, #240	@ 0xf0
 8000922:	f7ff ff91 	bl	8000848 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000926:	20d9      	movs	r0, #217	@ 0xd9
 8000928:	f7ff ff8e 	bl	8000848 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800092c:	2022      	movs	r0, #34	@ 0x22
 800092e:	f7ff ff8b 	bl	8000848 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000932:	20da      	movs	r0, #218	@ 0xda
 8000934:	f7ff ff88 	bl	8000848 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000938:	2012      	movs	r0, #18
 800093a:	f7ff ff85 	bl	8000848 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800093e:	20db      	movs	r0, #219	@ 0xdb
 8000940:	f7ff ff82 	bl	8000848 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000944:	2020      	movs	r0, #32
 8000946:	f7ff ff7f 	bl	8000848 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800094a:	208d      	movs	r0, #141	@ 0x8d
 800094c:	f7ff ff7c 	bl	8000848 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000950:	2014      	movs	r0, #20
 8000952:	f7ff ff79 	bl	8000848 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000956:	2001      	movs	r0, #1
 8000958:	f000 f988 	bl	8000c6c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800095c:	2000      	movs	r0, #0
 800095e:	f000 f80f 	bl	8000980 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000962:	f000 f825 	bl	80009b0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000966:	4b05      	ldr	r3, [pc, #20]	@ (800097c <ssd1306_Init+0xd0>)
 8000968:	2200      	movs	r2, #0
 800096a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800096c:	4b03      	ldr	r3, [pc, #12]	@ (800097c <ssd1306_Init+0xd0>)
 800096e:	2200      	movs	r2, #0
 8000970:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000972:	4b02      	ldr	r3, [pc, #8]	@ (800097c <ssd1306_Init+0xd0>)
 8000974:	2201      	movs	r2, #1
 8000976:	711a      	strb	r2, [r3, #4]
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000057c 	.word	0x2000057c

08000980 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d101      	bne.n	8000994 <ssd1306_Fill+0x14>
 8000990:	2300      	movs	r3, #0
 8000992:	e000      	b.n	8000996 <ssd1306_Fill+0x16>
 8000994:	23ff      	movs	r3, #255	@ 0xff
 8000996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800099a:	4619      	mov	r1, r3
 800099c:	4803      	ldr	r0, [pc, #12]	@ (80009ac <ssd1306_Fill+0x2c>)
 800099e:	f002 fe71 	bl	8003684 <memset>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000017c 	.word	0x2000017c

080009b0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80009b6:	2300      	movs	r3, #0
 80009b8:	71fb      	strb	r3, [r7, #7]
 80009ba:	e016      	b.n	80009ea <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	3b50      	subs	r3, #80	@ 0x50
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff40 	bl	8000848 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff3d 	bl	8000848 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80009ce:	2010      	movs	r0, #16
 80009d0:	f7ff ff3a 	bl	8000848 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	01db      	lsls	r3, r3, #7
 80009d8:	4a08      	ldr	r2, [pc, #32]	@ (80009fc <ssd1306_UpdateScreen+0x4c>)
 80009da:	4413      	add	r3, r2
 80009dc:	2180      	movs	r1, #128	@ 0x80
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff4a 	bl	8000878 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	3301      	adds	r3, #1
 80009e8:	71fb      	strb	r3, [r7, #7]
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b07      	cmp	r3, #7
 80009ee:	d9e5      	bls.n	80009bc <ssd1306_UpdateScreen+0xc>
    }
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000017c 	.word	0x2000017c

08000a00 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	71bb      	strb	r3, [r7, #6]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	db3d      	blt.n	8000a96 <ssd1306_DrawPixel+0x96>
 8000a1a:	79bb      	ldrb	r3, [r7, #6]
 8000a1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a1e:	d83a      	bhi.n	8000a96 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000a20:	797b      	ldrb	r3, [r7, #5]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d11a      	bne.n	8000a5c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	08db      	lsrs	r3, r3, #3
 8000a2c:	b2d8      	uxtb	r0, r3
 8000a2e:	4603      	mov	r3, r0
 8000a30:	01db      	lsls	r3, r3, #7
 8000a32:	4413      	add	r3, r2
 8000a34:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa0 <ssd1306_DrawPixel+0xa0>)
 8000a36:	5cd3      	ldrb	r3, [r2, r3]
 8000a38:	b25a      	sxtb	r2, r3
 8000a3a:	79bb      	ldrb	r3, [r7, #6]
 8000a3c:	f003 0307 	and.w	r3, r3, #7
 8000a40:	2101      	movs	r1, #1
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	b25b      	sxtb	r3, r3
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	b259      	sxtb	r1, r3
 8000a4c:	79fa      	ldrb	r2, [r7, #7]
 8000a4e:	4603      	mov	r3, r0
 8000a50:	01db      	lsls	r3, r3, #7
 8000a52:	4413      	add	r3, r2
 8000a54:	b2c9      	uxtb	r1, r1
 8000a56:	4a12      	ldr	r2, [pc, #72]	@ (8000aa0 <ssd1306_DrawPixel+0xa0>)
 8000a58:	54d1      	strb	r1, [r2, r3]
 8000a5a:	e01d      	b.n	8000a98 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a5c:	79fa      	ldrb	r2, [r7, #7]
 8000a5e:	79bb      	ldrb	r3, [r7, #6]
 8000a60:	08db      	lsrs	r3, r3, #3
 8000a62:	b2d8      	uxtb	r0, r3
 8000a64:	4603      	mov	r3, r0
 8000a66:	01db      	lsls	r3, r3, #7
 8000a68:	4413      	add	r3, r2
 8000a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa0 <ssd1306_DrawPixel+0xa0>)
 8000a6c:	5cd3      	ldrb	r3, [r2, r3]
 8000a6e:	b25a      	sxtb	r2, r3
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	2101      	movs	r1, #1
 8000a78:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7c:	b25b      	sxtb	r3, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	4013      	ands	r3, r2
 8000a84:	b259      	sxtb	r1, r3
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	4603      	mov	r3, r0
 8000a8a:	01db      	lsls	r3, r3, #7
 8000a8c:	4413      	add	r3, r2
 8000a8e:	b2c9      	uxtb	r1, r1
 8000a90:	4a03      	ldr	r2, [pc, #12]	@ (8000aa0 <ssd1306_DrawPixel+0xa0>)
 8000a92:	54d1      	strb	r1, [r2, r3]
 8000a94:	e000      	b.n	8000a98 <ssd1306_DrawPixel+0x98>
        return;
 8000a96:	bf00      	nop
    }
}
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	2000017c 	.word	0x2000017c

08000aa4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b089      	sub	sp, #36	@ 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4604      	mov	r4, r0
 8000aac:	4638      	mov	r0, r7
 8000aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000ab2:	4623      	mov	r3, r4
 8000ab4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	2b1f      	cmp	r3, #31
 8000aba:	d902      	bls.n	8000ac2 <ssd1306_WriteChar+0x1e>
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	2b7e      	cmp	r3, #126	@ 0x7e
 8000ac0:	d901      	bls.n	8000ac6 <ssd1306_WriteChar+0x22>
        return 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e079      	b.n	8000bba <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d005      	beq.n	8000ad8 <ssd1306_WriteChar+0x34>
 8000acc:	68ba      	ldr	r2, [r7, #8]
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	3b20      	subs	r3, #32
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	e000      	b.n	8000ada <ssd1306_WriteChar+0x36>
 8000ad8:	783b      	ldrb	r3, [r7, #0]
 8000ada:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000adc:	4b39      	ldr	r3, [pc, #228]	@ (8000bc4 <ssd1306_WriteChar+0x120>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	7dfb      	ldrb	r3, [r7, #23]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	2b80      	cmp	r3, #128	@ 0x80
 8000ae8:	dc06      	bgt.n	8000af8 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000aea:	4b36      	ldr	r3, [pc, #216]	@ (8000bc4 <ssd1306_WriteChar+0x120>)
 8000aec:	885b      	ldrh	r3, [r3, #2]
 8000aee:	461a      	mov	r2, r3
 8000af0:	787b      	ldrb	r3, [r7, #1]
 8000af2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000af4:	2b40      	cmp	r3, #64	@ 0x40
 8000af6:	dd01      	ble.n	8000afc <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	e05e      	b.n	8000bba <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	e04d      	b.n	8000b9e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	3b20      	subs	r3, #32
 8000b08:	7879      	ldrb	r1, [r7, #1]
 8000b0a:	fb01 f303 	mul.w	r3, r1, r3
 8000b0e:	4619      	mov	r1, r3
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	440b      	add	r3, r1
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4413      	add	r3, r2
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	e036      	b.n	8000b90 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d013      	beq.n	8000b5a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000b32:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <ssd1306_WriteChar+0x120>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	4413      	add	r3, r2
 8000b3e:	b2d8      	uxtb	r0, r3
 8000b40:	4b20      	ldr	r3, [pc, #128]	@ (8000bc4 <ssd1306_WriteChar+0x120>)
 8000b42:	885b      	ldrh	r3, [r3, #2]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000b52:	4619      	mov	r1, r3
 8000b54:	f7ff ff54 	bl	8000a00 <ssd1306_DrawPixel>
 8000b58:	e017      	b.n	8000b8a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <ssd1306_WriteChar+0x120>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	4413      	add	r3, r2
 8000b66:	b2d8      	uxtb	r0, r3
 8000b68:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <ssd1306_WriteChar+0x120>)
 8000b6a:	885b      	ldrh	r3, [r3, #2]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	4413      	add	r3, r2
 8000b74:	b2d9      	uxtb	r1, r3
 8000b76:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	bf0c      	ite	eq
 8000b7e:	2301      	moveq	r3, #1
 8000b80:	2300      	movne	r3, #0
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	461a      	mov	r2, r3
 8000b86:	f7ff ff3b 	bl	8000a00 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	69ba      	ldr	r2, [r7, #24]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d3c4      	bcc.n	8000b22 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	61fb      	str	r3, [r7, #28]
 8000b9e:	787b      	ldrb	r3, [r7, #1]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d3ac      	bcc.n	8000b02 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <ssd1306_WriteChar+0x120>)
 8000baa:	881a      	ldrh	r2, [r3, #0]
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4b03      	ldr	r3, [pc, #12]	@ (8000bc4 <ssd1306_WriteChar+0x120>)
 8000bb6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3724      	adds	r7, #36	@ 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd90      	pop	{r4, r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000057c 	.word	0x2000057c

08000bc8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af02      	add	r7, sp, #8
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	4638      	mov	r0, r7
 8000bd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000bd6:	e013      	b.n	8000c00 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	7818      	ldrb	r0, [r3, #0]
 8000bdc:	7e3b      	ldrb	r3, [r7, #24]
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	463b      	mov	r3, r7
 8000be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000be4:	f7ff ff5e 	bl	8000aa4 <ssd1306_WriteChar>
 8000be8:	4603      	mov	r3, r0
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d002      	beq.n	8000bfa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	e008      	b.n	8000c0c <ssd1306_WriteString+0x44>
        }
        str++;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1e7      	bne.n	8000bd8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	4613      	mov	r3, r2
 8000c22:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <ssd1306_SetCursor+0x2c>)
 8000c2a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <ssd1306_SetCursor+0x2c>)
 8000c32:	805a      	strh	r2, [r3, #2]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	2000057c 	.word	0x2000057c

08000c44 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000c4e:	2381      	movs	r3, #129	@ 0x81
 8000c50:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fdf7 	bl	8000848 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fdf3 	bl	8000848 <ssd1306_WriteCommand>
}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d005      	beq.n	8000c88 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000c7c:	23af      	movs	r3, #175	@ 0xaf
 8000c7e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000c80:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <ssd1306_SetDisplayOn+0x38>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	715a      	strb	r2, [r3, #5]
 8000c86:	e004      	b.n	8000c92 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000c88:	23ae      	movs	r3, #174	@ 0xae
 8000c8a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <ssd1306_SetDisplayOn+0x38>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fdd7 	bl	8000848 <ssd1306_WriteCommand>
}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000057c 	.word	0x2000057c

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cae:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6193      	str	r3, [r2, #24]
 8000cba:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4a0e      	ldr	r2, [pc, #56]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	61d3      	str	r3, [r2, #28]
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <HAL_MspInit+0x5c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_MspInit+0x60>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <HAL_MspInit+0x60>)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010000 	.word	0x40010000

08000d0c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a15      	ldr	r2, [pc, #84]	@ (8000d7c <HAL_I2C_MspInit+0x70>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d123      	bne.n	8000d74 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a13      	ldr	r2, [pc, #76]	@ (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0308 	and.w	r3, r3, #8
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d44:	23c0      	movs	r3, #192	@ 0xc0
 8000d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d48:	2312      	movs	r3, #18
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4619      	mov	r1, r3
 8000d56:	480b      	ldr	r0, [pc, #44]	@ (8000d84 <HAL_I2C_MspInit+0x78>)
 8000d58:	f000 faf6 	bl	8001348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d5e:	69db      	ldr	r3, [r3, #28]
 8000d60:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d66:	61d3      	str	r3, [r2, #28]
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <HAL_I2C_MspInit+0x74>)
 8000d6a:	69db      	ldr	r3, [r3, #28]
 8000d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010c00 	.word	0x40010c00

08000d88 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a09      	ldr	r2, [pc, #36]	@ (8000dbc <HAL_TIM_Base_MspInit+0x34>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10b      	bne.n	8000db2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <HAL_TIM_Base_MspInit+0x38>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	4a08      	ldr	r2, [pc, #32]	@ (8000dc0 <HAL_TIM_Base_MspInit+0x38>)
 8000da0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000da4:	6193      	str	r3, [r2, #24]
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_TIM_Base_MspInit+0x38>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	40012c00 	.word	0x40012c00
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1c      	ldr	r2, [pc, #112]	@ (8000e50 <HAL_UART_MspInit+0x8c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d131      	bne.n	8000e48 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <HAL_UART_MspInit+0x90>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a1a      	ldr	r2, [pc, #104]	@ (8000e54 <HAL_UART_MspInit+0x90>)
 8000dea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <HAL_UART_MspInit+0x90>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <HAL_UART_MspInit+0x90>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a14      	ldr	r2, [pc, #80]	@ (8000e54 <HAL_UART_MspInit+0x90>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <HAL_UART_MspInit+0x90>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	480b      	ldr	r0, [pc, #44]	@ (8000e58 <HAL_UART_MspInit+0x94>)
 8000e2a:	f000 fa8d 	bl	8001348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <HAL_UART_MspInit+0x94>)
 8000e44:	f000 fa80 	bl	8001348 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40013800 	.word	0x40013800
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010800 	.word	0x40010800

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <NMI_Handler+0x4>

08000e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <MemManage_Handler+0x4>

08000e74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 f8fe 	bl	80010ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000eb8:	2004      	movs	r0, #4
 8000eba:	f000 fbe1 	bl	8001680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	60f8      	str	r0, [r7, #12]
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	e00a      	b.n	8000eea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ed4:	f3af 8000 	nop.w
 8000ed8:	4601      	mov	r1, r0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1c5a      	adds	r2, r3, #1
 8000ede:	60ba      	str	r2, [r7, #8]
 8000ee0:	b2ca      	uxtb	r2, r1
 8000ee2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	dbf0      	blt.n	8000ed4 <_read+0x12>
  }

  return len;
 8000ef2:	687b      	ldr	r3, [r7, #4]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <_close>:
  }
  return len;
}

int _close(int file)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f22:	605a      	str	r2, [r3, #4]
  return 0;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <_isatty>:

int _isatty(int file)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f38:	2301      	movs	r3, #1
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	@ (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d207      	bcs.n	8000f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f8c:	f002 fbc8 	bl	8003720 <__errno>
 8000f90:	4603      	mov	r3, r0
 8000f92:	220c      	movs	r2, #12
 8000f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	e009      	b.n	8000fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <_sbrk+0x64>)
 8000fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20005000 	.word	0x20005000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	20000584 	.word	0x20000584
 8000fc4:	200006d8 	.word	0x200006d8

08000fc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd4:	f7ff fff8 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd8:	480b      	ldr	r0, [pc, #44]	@ (8001008 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fda:	490c      	ldr	r1, [pc, #48]	@ (800100c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fdc:	4a0c      	ldr	r2, [pc, #48]	@ (8001010 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a09      	ldr	r2, [pc, #36]	@ (8001014 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ff0:	4c09      	ldr	r4, [pc, #36]	@ (8001018 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f002 fb95 	bl	800372c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001002:	f7ff fa59 	bl	80004b8 <main>
  bx lr
 8001006:	4770      	bx	lr
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001010:	08004d90 	.word	0x08004d90
  ldr r2, =_sbss
 8001014:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001018:	200006d8 	.word	0x200006d8

0800101c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC1_2_IRQHandler>
	...

08001020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <HAL_Init+0x28>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a07      	ldr	r2, [pc, #28]	@ (8001048 <HAL_Init+0x28>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 f947 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001036:	200f      	movs	r0, #15
 8001038:	f000 f808 	bl	800104c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800103c:	f7ff fe34 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40022000 	.word	0x40022000

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_InitTick+0x54>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <HAL_InitTick+0x58>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001062:	fbb3 f3f1 	udiv	r3, r3, r1
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f95f 	bl	800132e <HAL_SYSTICK_Config>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00e      	b.n	8001098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d80a      	bhi.n	8001096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001080:	2200      	movs	r2, #0
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f000 f927 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800108c:	4a06      	ldr	r2, [pc, #24]	@ (80010a8 <HAL_InitTick+0x5c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e000      	b.n	8001098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000004 	.word	0x20000004

080010ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <HAL_IncTick+0x1c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <HAL_IncTick+0x20>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a03      	ldr	r2, [pc, #12]	@ (80010cc <HAL_IncTick+0x20>)
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000588 	.word	0x20000588

080010d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b02      	ldr	r3, [pc, #8]	@ (80010e0 <HAL_GetTick+0x10>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	20000588 	.word	0x20000588

080010e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff fff0 	bl	80010d0 <HAL_GetTick>
 80010f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fc:	d005      	beq.n	800110a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <HAL_Delay+0x44>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800110a:	bf00      	nop
 800110c:	f7ff ffe0 	bl	80010d0 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	429a      	cmp	r2, r3
 800111a:	d8f7      	bhi.n	800110c <HAL_Delay+0x28>
  {
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008

0800112c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	@ (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	@ (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db0b      	blt.n	80011ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4906      	ldr	r1, [pc, #24]	@ (80011c4 <__NVIC_EnableIRQ+0x34>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	@ (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	@ (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	@ 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	@ 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff90 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff2d 	bl	800112c <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff42 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff90 	bl	800121c <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5f 	bl	80011c8 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff35 	bl	8001190 <__NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffa2 	bl	8001280 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b08b      	sub	sp, #44	@ 0x2c
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135a:	e169      	b.n	8001630 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800135c:	2201      	movs	r2, #1
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	429a      	cmp	r2, r3
 8001376:	f040 8158 	bne.w	800162a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4a9a      	ldr	r2, [pc, #616]	@ (80015e8 <HAL_GPIO_Init+0x2a0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d05e      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 8001384:	4a98      	ldr	r2, [pc, #608]	@ (80015e8 <HAL_GPIO_Init+0x2a0>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d875      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 800138a:	4a98      	ldr	r2, [pc, #608]	@ (80015ec <HAL_GPIO_Init+0x2a4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d058      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 8001390:	4a96      	ldr	r2, [pc, #600]	@ (80015ec <HAL_GPIO_Init+0x2a4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d86f      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 8001396:	4a96      	ldr	r2, [pc, #600]	@ (80015f0 <HAL_GPIO_Init+0x2a8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d052      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 800139c:	4a94      	ldr	r2, [pc, #592]	@ (80015f0 <HAL_GPIO_Init+0x2a8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d869      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013a2:	4a94      	ldr	r2, [pc, #592]	@ (80015f4 <HAL_GPIO_Init+0x2ac>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d04c      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 80013a8:	4a92      	ldr	r2, [pc, #584]	@ (80015f4 <HAL_GPIO_Init+0x2ac>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d863      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013ae:	4a92      	ldr	r2, [pc, #584]	@ (80015f8 <HAL_GPIO_Init+0x2b0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d046      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
 80013b4:	4a90      	ldr	r2, [pc, #576]	@ (80015f8 <HAL_GPIO_Init+0x2b0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d85d      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013ba:	2b12      	cmp	r3, #18
 80013bc:	d82a      	bhi.n	8001414 <HAL_GPIO_Init+0xcc>
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d859      	bhi.n	8001476 <HAL_GPIO_Init+0x12e>
 80013c2:	a201      	add	r2, pc, #4	@ (adr r2, 80013c8 <HAL_GPIO_Init+0x80>)
 80013c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c8:	08001443 	.word	0x08001443
 80013cc:	0800141d 	.word	0x0800141d
 80013d0:	0800142f 	.word	0x0800142f
 80013d4:	08001471 	.word	0x08001471
 80013d8:	08001477 	.word	0x08001477
 80013dc:	08001477 	.word	0x08001477
 80013e0:	08001477 	.word	0x08001477
 80013e4:	08001477 	.word	0x08001477
 80013e8:	08001477 	.word	0x08001477
 80013ec:	08001477 	.word	0x08001477
 80013f0:	08001477 	.word	0x08001477
 80013f4:	08001477 	.word	0x08001477
 80013f8:	08001477 	.word	0x08001477
 80013fc:	08001477 	.word	0x08001477
 8001400:	08001477 	.word	0x08001477
 8001404:	08001477 	.word	0x08001477
 8001408:	08001477 	.word	0x08001477
 800140c:	08001425 	.word	0x08001425
 8001410:	08001439 	.word	0x08001439
 8001414:	4a79      	ldr	r2, [pc, #484]	@ (80015fc <HAL_GPIO_Init+0x2b4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d013      	beq.n	8001442 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800141a:	e02c      	b.n	8001476 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	623b      	str	r3, [r7, #32]
          break;
 8001422:	e029      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	3304      	adds	r3, #4
 800142a:	623b      	str	r3, [r7, #32]
          break;
 800142c:	e024      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	3308      	adds	r3, #8
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e01f      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	330c      	adds	r3, #12
 800143e:	623b      	str	r3, [r7, #32]
          break;
 8001440:	e01a      	b.n	8001478 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800144a:	2304      	movs	r3, #4
 800144c:	623b      	str	r3, [r7, #32]
          break;
 800144e:	e013      	b.n	8001478 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d105      	bne.n	8001464 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001458:	2308      	movs	r3, #8
 800145a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	611a      	str	r2, [r3, #16]
          break;
 8001462:	e009      	b.n	8001478 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001464:	2308      	movs	r3, #8
 8001466:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	615a      	str	r2, [r3, #20]
          break;
 800146e:	e003      	b.n	8001478 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
          break;
 8001474:	e000      	b.n	8001478 <HAL_GPIO_Init+0x130>
          break;
 8001476:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2bff      	cmp	r3, #255	@ 0xff
 800147c:	d801      	bhi.n	8001482 <HAL_GPIO_Init+0x13a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	e001      	b.n	8001486 <HAL_GPIO_Init+0x13e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3304      	adds	r3, #4
 8001486:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2bff      	cmp	r3, #255	@ 0xff
 800148c:	d802      	bhi.n	8001494 <HAL_GPIO_Init+0x14c>
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	e002      	b.n	800149a <HAL_GPIO_Init+0x152>
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	3b08      	subs	r3, #8
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	210f      	movs	r1, #15
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	401a      	ands	r2, r3
 80014ac:	6a39      	ldr	r1, [r7, #32]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	431a      	orrs	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80b1 	beq.w	800162a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001600 <HAL_GPIO_Init+0x2b8>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001600 <HAL_GPIO_Init+0x2b8>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001600 <HAL_GPIO_Init+0x2b8>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014e0:	4a48      	ldr	r2, [pc, #288]	@ (8001604 <HAL_GPIO_Init+0x2bc>)
 80014e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e4:	089b      	lsrs	r3, r3, #2
 80014e6:	3302      	adds	r3, #2
 80014e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4013      	ands	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a40      	ldr	r2, [pc, #256]	@ (8001608 <HAL_GPIO_Init+0x2c0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d013      	beq.n	8001534 <HAL_GPIO_Init+0x1ec>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a3f      	ldr	r2, [pc, #252]	@ (800160c <HAL_GPIO_Init+0x2c4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d00d      	beq.n	8001530 <HAL_GPIO_Init+0x1e8>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a3e      	ldr	r2, [pc, #248]	@ (8001610 <HAL_GPIO_Init+0x2c8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d007      	beq.n	800152c <HAL_GPIO_Init+0x1e4>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a3d      	ldr	r2, [pc, #244]	@ (8001614 <HAL_GPIO_Init+0x2cc>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d101      	bne.n	8001528 <HAL_GPIO_Init+0x1e0>
 8001524:	2303      	movs	r3, #3
 8001526:	e006      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 8001528:	2304      	movs	r3, #4
 800152a:	e004      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 800152c:	2302      	movs	r3, #2
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_GPIO_Init+0x1ee>
 8001534:	2300      	movs	r3, #0
 8001536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001538:	f002 0203 	and.w	r2, r2, #3
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	4093      	lsls	r3, r2
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001546:	492f      	ldr	r1, [pc, #188]	@ (8001604 <HAL_GPIO_Init+0x2bc>)
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	3302      	adds	r3, #2
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001560:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	492c      	ldr	r1, [pc, #176]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	608b      	str	r3, [r1, #8]
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800156e:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	43db      	mvns	r3, r3
 8001576:	4928      	ldr	r1, [pc, #160]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001578:	4013      	ands	r3, r2
 800157a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001588:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	4922      	ldr	r1, [pc, #136]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	60cb      	str	r3, [r1, #12]
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001596:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	43db      	mvns	r3, r3
 800159e:	491e      	ldr	r1, [pc, #120]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b0:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4918      	ldr	r1, [pc, #96]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	4914      	ldr	r1, [pc, #80]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d021      	beq.n	800161c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	490e      	ldr	r1, [pc, #56]	@ (8001618 <HAL_GPIO_Init+0x2d0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e021      	b.n	800162a <HAL_GPIO_Init+0x2e2>
 80015e6:	bf00      	nop
 80015e8:	10320000 	.word	0x10320000
 80015ec:	10310000 	.word	0x10310000
 80015f0:	10220000 	.word	0x10220000
 80015f4:	10210000 	.word	0x10210000
 80015f8:	10120000 	.word	0x10120000
 80015fc:	10110000 	.word	0x10110000
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000
 8001608:	40010800 	.word	0x40010800
 800160c:	40010c00 	.word	0x40010c00
 8001610:	40011000 	.word	0x40011000
 8001614:	40011400 	.word	0x40011400
 8001618:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_GPIO_Init+0x304>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	43db      	mvns	r3, r3
 8001624:	4909      	ldr	r1, [pc, #36]	@ (800164c <HAL_GPIO_Init+0x304>)
 8001626:	4013      	ands	r3, r2
 8001628:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	3301      	adds	r3, #1
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	fa22 f303 	lsr.w	r3, r2, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	f47f ae8e 	bne.w	800135c <HAL_GPIO_Init+0x14>
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	372c      	adds	r7, #44	@ 0x2c
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	887b      	ldrh	r3, [r7, #2]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001668:	2301      	movs	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	e001      	b.n	8001672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
	...

08001680 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800168a:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	4013      	ands	r3, r2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001696:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe fefc 	bl	800049c <HAL_GPIO_EXTI_Callback>
  }
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40010400 	.word	0x40010400

080016b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e12b      	b.n	800191a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d106      	bne.n	80016dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fb18 	bl	8000d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2224      	movs	r2, #36	@ 0x24
 80016e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0201 	bic.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001702:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001714:	f001 f842 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 8001718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	4a81      	ldr	r2, [pc, #516]	@ (8001924 <HAL_I2C_Init+0x274>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d807      	bhi.n	8001734 <HAL_I2C_Init+0x84>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4a80      	ldr	r2, [pc, #512]	@ (8001928 <HAL_I2C_Init+0x278>)
 8001728:	4293      	cmp	r3, r2
 800172a:	bf94      	ite	ls
 800172c:	2301      	movls	r3, #1
 800172e:	2300      	movhi	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	e006      	b.n	8001742 <HAL_I2C_Init+0x92>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4a7d      	ldr	r2, [pc, #500]	@ (800192c <HAL_I2C_Init+0x27c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	bf94      	ite	ls
 800173c:	2301      	movls	r3, #1
 800173e:	2300      	movhi	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e0e7      	b.n	800191a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4a78      	ldr	r2, [pc, #480]	@ (8001930 <HAL_I2C_Init+0x280>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	0c9b      	lsrs	r3, r3, #18
 8001754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	430a      	orrs	r2, r1
 8001768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4a6a      	ldr	r2, [pc, #424]	@ (8001924 <HAL_I2C_Init+0x274>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d802      	bhi.n	8001784 <HAL_I2C_Init+0xd4>
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	3301      	adds	r3, #1
 8001782:	e009      	b.n	8001798 <HAL_I2C_Init+0xe8>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	4a69      	ldr	r2, [pc, #420]	@ (8001934 <HAL_I2C_Init+0x284>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	3301      	adds	r3, #1
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	430b      	orrs	r3, r1
 800179e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	495c      	ldr	r1, [pc, #368]	@ (8001924 <HAL_I2C_Init+0x274>)
 80017b4:	428b      	cmp	r3, r1
 80017b6:	d819      	bhi.n	80017ec <HAL_I2C_Init+0x13c>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1e59      	subs	r1, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80017c6:	1c59      	adds	r1, r3, #1
 80017c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017cc:	400b      	ands	r3, r1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00a      	beq.n	80017e8 <HAL_I2C_Init+0x138>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1e59      	subs	r1, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e0:	3301      	adds	r3, #1
 80017e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e6:	e051      	b.n	800188c <HAL_I2C_Init+0x1dc>
 80017e8:	2304      	movs	r3, #4
 80017ea:	e04f      	b.n	800188c <HAL_I2C_Init+0x1dc>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d111      	bne.n	8001818 <HAL_I2C_Init+0x168>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1e58      	subs	r0, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	440b      	add	r3, r1
 8001802:	fbb0 f3f3 	udiv	r3, r0, r3
 8001806:	3301      	adds	r3, #1
 8001808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf0c      	ite	eq
 8001810:	2301      	moveq	r3, #1
 8001812:	2300      	movne	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	e012      	b.n	800183e <HAL_I2C_Init+0x18e>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1e58      	subs	r0, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6859      	ldr	r1, [r3, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	0099      	lsls	r1, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	fbb0 f3f3 	udiv	r3, r0, r3
 800182e:	3301      	adds	r3, #1
 8001830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Init+0x196>
 8001842:	2301      	movs	r3, #1
 8001844:	e022      	b.n	800188c <HAL_I2C_Init+0x1dc>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10e      	bne.n	800186c <HAL_I2C_Init+0x1bc>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1e58      	subs	r0, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6859      	ldr	r1, [r3, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	440b      	add	r3, r1
 800185c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001860:	3301      	adds	r3, #1
 8001862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800186a:	e00f      	b.n	800188c <HAL_I2C_Init+0x1dc>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1e58      	subs	r0, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6859      	ldr	r1, [r3, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	0099      	lsls	r1, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001882:	3301      	adds	r3, #1
 8001884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001888:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	6809      	ldr	r1, [r1, #0]
 8001890:	4313      	orrs	r3, r2
 8001892:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69da      	ldr	r2, [r3, #28]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6911      	ldr	r1, [r2, #16]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68d2      	ldr	r2, [r2, #12]
 80018c6:	4311      	orrs	r1, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	430b      	orrs	r3, r1
 80018ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2220      	movs	r2, #32
 8001906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	000186a0 	.word	0x000186a0
 8001928:	001e847f 	.word	0x001e847f
 800192c:	003d08ff 	.word	0x003d08ff
 8001930:	431bde83 	.word	0x431bde83
 8001934:	10624dd3 	.word	0x10624dd3

08001938 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af02      	add	r7, sp, #8
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	4608      	mov	r0, r1
 8001942:	4611      	mov	r1, r2
 8001944:	461a      	mov	r2, r3
 8001946:	4603      	mov	r3, r0
 8001948:	817b      	strh	r3, [r7, #10]
 800194a:	460b      	mov	r3, r1
 800194c:	813b      	strh	r3, [r7, #8]
 800194e:	4613      	mov	r3, r2
 8001950:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001952:	f7ff fbbd 	bl	80010d0 <HAL_GetTick>
 8001956:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b20      	cmp	r3, #32
 8001962:	f040 80d9 	bne.w	8001b18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2319      	movs	r3, #25
 800196c:	2201      	movs	r2, #1
 800196e:	496d      	ldr	r1, [pc, #436]	@ (8001b24 <HAL_I2C_Mem_Write+0x1ec>)
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f971 	bl	8001c58 <I2C_WaitOnFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800197c:	2302      	movs	r3, #2
 800197e:	e0cc      	b.n	8001b1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_I2C_Mem_Write+0x56>
 800198a:	2302      	movs	r3, #2
 800198c:	e0c5      	b.n	8001b1a <HAL_I2C_Mem_Write+0x1e2>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d007      	beq.n	80019b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2221      	movs	r2, #33	@ 0x21
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2240      	movs	r2, #64	@ 0x40
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6a3a      	ldr	r2, [r7, #32]
 80019de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80019e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4a4d      	ldr	r2, [pc, #308]	@ (8001b28 <HAL_I2C_Mem_Write+0x1f0>)
 80019f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019f6:	88f8      	ldrh	r0, [r7, #6]
 80019f8:	893a      	ldrh	r2, [r7, #8]
 80019fa:	8979      	ldrh	r1, [r7, #10]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	4603      	mov	r3, r0
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f890 	bl	8001b2c <I2C_RequestMemoryWrite>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d052      	beq.n	8001ab8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e081      	b.n	8001b1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 fa36 	bl	8001e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00d      	beq.n	8001a42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d107      	bne.n	8001a3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e06b      	b.n	8001b1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d11b      	bne.n	8001ab8 <HAL_I2C_Mem_Write+0x180>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d017      	beq.n	8001ab8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8c:	781a      	ldrb	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1aa      	bne.n	8001a16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 fa29 	bl	8001f1c <I2C_WaitOnBTFFlagUntilTimeout>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00d      	beq.n	8001aec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d107      	bne.n	8001ae8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ae6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e016      	b.n	8001b1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2220      	movs	r2, #32
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e000      	b.n	8001b1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b18:	2302      	movs	r3, #2
  }
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	00100002 	.word	0x00100002
 8001b28:	ffff0000 	.word	0xffff0000

08001b2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af02      	add	r7, sp, #8
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	4608      	mov	r0, r1
 8001b36:	4611      	mov	r1, r2
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	817b      	strh	r3, [r7, #10]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	813b      	strh	r3, [r7, #8]
 8001b42:	4613      	mov	r3, r2
 8001b44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 f878 	bl	8001c58 <I2C_WaitOnFlagUntilTimeout>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00d      	beq.n	8001b8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b7c:	d103      	bne.n	8001b86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e05f      	b.n	8001c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b8a:	897b      	ldrh	r3, [r7, #10]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	6a3a      	ldr	r2, [r7, #32]
 8001b9e:	492d      	ldr	r1, [pc, #180]	@ (8001c54 <I2C_RequestMemoryWrite+0x128>)
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f000 f8d3 	bl	8001d4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e04c      	b.n	8001c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bc8:	6a39      	ldr	r1, [r7, #32]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f95e 	bl	8001e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00d      	beq.n	8001bf2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d107      	bne.n	8001bee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e02b      	b.n	8001c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bf8:	893b      	ldrh	r3, [r7, #8]
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	e021      	b.n	8001c48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c04:	893b      	ldrh	r3, [r7, #8]
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c14:	6a39      	ldr	r1, [r7, #32]
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 f938 	bl	8001e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00d      	beq.n	8001c3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d107      	bne.n	8001c3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e005      	b.n	8001c4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c3e:	893b      	ldrh	r3, [r7, #8]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	00010002 	.word	0x00010002

08001c58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	4613      	mov	r3, r2
 8001c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c68:	e048      	b.n	8001cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c70:	d044      	beq.n	8001cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c72:	f7ff fa2d 	bl	80010d0 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d302      	bcc.n	8001c88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d139      	bne.n	8001cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	0c1b      	lsrs	r3, r3, #16
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d10d      	bne.n	8001cae <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	e00c      	b.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	43da      	mvns	r2, r3
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d116      	bne.n	8001cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	f043 0220 	orr.w	r2, r3, #32
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e023      	b.n	8001d44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	0c1b      	lsrs	r3, r3, #16
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d10d      	bne.n	8001d22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	4013      	ands	r3, r2
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	e00c      	b.n	8001d3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	43da      	mvns	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bf0c      	ite	eq
 8001d34:	2301      	moveq	r3, #1
 8001d36:	2300      	movne	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d093      	beq.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d5a:	e071      	b.n	8001e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d6a:	d123      	bne.n	8001db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	f043 0204 	orr.w	r2, r3, #4
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e067      	b.n	8001e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dba:	d041      	beq.n	8001e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dbc:	f7ff f988 	bl	80010d0 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d302      	bcc.n	8001dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d136      	bne.n	8001e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d10c      	bne.n	8001df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	43da      	mvns	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4013      	ands	r3, r2
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	bf14      	ite	ne
 8001dee:	2301      	movne	r3, #1
 8001df0:	2300      	moveq	r3, #0
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	e00b      	b.n	8001e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	4013      	ands	r3, r2
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf14      	ite	ne
 8001e08:	2301      	movne	r3, #1
 8001e0a:	2300      	moveq	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d016      	beq.n	8001e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	f043 0220 	orr.w	r2, r3, #32
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e021      	b.n	8001e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	0c1b      	lsrs	r3, r3, #16
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d10c      	bne.n	8001e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	43da      	mvns	r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	4013      	ands	r3, r2
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	e00b      	b.n	8001e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f47f af6d 	bne.w	8001d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e98:	e034      	b.n	8001f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f886 	bl	8001fac <I2C_IsAcknowledgeFailed>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e034      	b.n	8001f14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d028      	beq.n	8001f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb2:	f7ff f90d 	bl	80010d0 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d302      	bcc.n	8001ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d11d      	bne.n	8001f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ed2:	2b80      	cmp	r3, #128	@ 0x80
 8001ed4:	d016      	beq.n	8001f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	f043 0220 	orr.w	r2, r3, #32
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e007      	b.n	8001f14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f0e:	2b80      	cmp	r3, #128	@ 0x80
 8001f10:	d1c3      	bne.n	8001e9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f28:	e034      	b.n	8001f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f83e 	bl	8001fac <I2C_IsAcknowledgeFailed>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e034      	b.n	8001fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f40:	d028      	beq.n	8001f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f42:	f7ff f8c5 	bl	80010d0 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d302      	bcc.n	8001f58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d11d      	bne.n	8001f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d016      	beq.n	8001f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	f043 0220 	orr.w	r2, r3, #32
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e007      	b.n	8001fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d1c3      	bne.n	8001f2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fc2:	d11b      	bne.n	8001ffc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe8:	f043 0204 	orr.w	r2, r3, #4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e272      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8087 	beq.w	8002136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002028:	4b92      	ldr	r3, [pc, #584]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b04      	cmp	r3, #4
 8002032:	d00c      	beq.n	800204e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002034:	4b8f      	ldr	r3, [pc, #572]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d112      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
 8002040:	4b8c      	ldr	r3, [pc, #560]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800204c:	d10b      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204e:	4b89      	ldr	r3, [pc, #548]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d06c      	beq.n	8002134 <HAL_RCC_OscConfig+0x12c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d168      	bne.n	8002134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e24c      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x76>
 8002070:	4b80      	ldr	r3, [pc, #512]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a7f      	ldr	r2, [pc, #508]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	e02e      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x98>
 8002086:	4b7b      	ldr	r3, [pc, #492]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7a      	ldr	r2, [pc, #488]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b78      	ldr	r3, [pc, #480]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a77      	ldr	r2, [pc, #476]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002098:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e01d      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0xbc>
 80020aa:	4b72      	ldr	r3, [pc, #456]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a71      	ldr	r2, [pc, #452]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b6f      	ldr	r3, [pc, #444]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6e      	ldr	r2, [pc, #440]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020c4:	4b6b      	ldr	r3, [pc, #428]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a6a      	ldr	r2, [pc, #424]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b68      	ldr	r3, [pc, #416]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a67      	ldr	r2, [pc, #412]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7fe fff4 	bl	80010d0 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7fe fff0 	bl	80010d0 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	@ 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e200      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0xe4>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7fe ffe0 	bl	80010d0 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7fe ffdc 	bl	80010d0 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	@ 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1ec      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	4b53      	ldr	r3, [pc, #332]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x10c>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d063      	beq.n	800220a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002142:	4b4c      	ldr	r3, [pc, #304]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800214e:	4b49      	ldr	r3, [pc, #292]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b08      	cmp	r3, #8
 8002158:	d11c      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
 800215a:	4b46      	ldr	r3, [pc, #280]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d116      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	4b43      	ldr	r3, [pc, #268]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e1c0      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217e:	4b3d      	ldr	r3, [pc, #244]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4939      	ldr	r1, [pc, #228]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	e03a      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219c:	4b36      	ldr	r3, [pc, #216]	@ (8002278 <HAL_RCC_OscConfig+0x270>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7fe ff95 	bl	80010d0 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021aa:	f7fe ff91 	bl	80010d0 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e1a1      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4927      	ldr	r1, [pc, #156]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
 80021dc:	e015      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021de:	4b26      	ldr	r3, [pc, #152]	@ (8002278 <HAL_RCC_OscConfig+0x270>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe ff74 	bl	80010d0 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ec:	f7fe ff70 	bl	80010d0 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e180      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d03a      	beq.n	800228c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d019      	beq.n	8002252 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221e:	4b17      	ldr	r3, [pc, #92]	@ (800227c <HAL_RCC_OscConfig+0x274>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7fe ff54 	bl	80010d0 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7fe ff50 	bl	80010d0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e160      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223e:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800224a:	2001      	movs	r0, #1
 800224c:	f000 face 	bl	80027ec <RCC_Delay>
 8002250:	e01c      	b.n	800228c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002252:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <HAL_RCC_OscConfig+0x274>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7fe ff3a 	bl	80010d0 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225e:	e00f      	b.n	8002280 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7fe ff36 	bl	80010d0 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d908      	bls.n	8002280 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e146      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	42420000 	.word	0x42420000
 800227c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	4b92      	ldr	r3, [pc, #584]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e9      	bne.n	8002260 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a6 	beq.w	80023e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229e:	4b8b      	ldr	r3, [pc, #556]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b88      	ldr	r3, [pc, #544]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a87      	ldr	r2, [pc, #540]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b85      	ldr	r3, [pc, #532]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	4b82      	ldr	r3, [pc, #520]	@ (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d118      	bne.n	8002304 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d2:	4b7f      	ldr	r3, [pc, #508]	@ (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a7e      	ldr	r2, [pc, #504]	@ (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022de:	f7fe fef7 	bl	80010d0 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e6:	f7fe fef3 	bl	80010d0 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b64      	cmp	r3, #100	@ 0x64
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e103      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	4b75      	ldr	r3, [pc, #468]	@ (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x312>
 800230c:	4b6f      	ldr	r3, [pc, #444]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a6e      	ldr	r2, [pc, #440]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	e02d      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x334>
 8002322:	4b6a      	ldr	r3, [pc, #424]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a69      	ldr	r2, [pc, #420]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	4b67      	ldr	r3, [pc, #412]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a66      	ldr	r2, [pc, #408]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6213      	str	r3, [r2, #32]
 800233a:	e01c      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d10c      	bne.n	800235e <HAL_RCC_OscConfig+0x356>
 8002344:	4b61      	ldr	r3, [pc, #388]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a60      	ldr	r2, [pc, #384]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	4b5e      	ldr	r3, [pc, #376]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a5d      	ldr	r2, [pc, #372]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800235e:	4b5b      	ldr	r3, [pc, #364]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a5a      	ldr	r2, [pc, #360]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	4b58      	ldr	r3, [pc, #352]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a57      	ldr	r2, [pc, #348]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d015      	beq.n	80023aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7fe fea7 	bl	80010d0 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7fe fea3 	bl	80010d0 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0b1      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	4b4b      	ldr	r3, [pc, #300]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ee      	beq.n	8002386 <HAL_RCC_OscConfig+0x37e>
 80023a8:	e014      	b.n	80023d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7fe fe91 	bl	80010d0 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe fe8d 	bl	80010d0 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e09b      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	4b40      	ldr	r3, [pc, #256]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ee      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d105      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4b3c      	ldr	r3, [pc, #240]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a3b      	ldr	r2, [pc, #236]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8087 	beq.w	80024fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f0:	4b36      	ldr	r3, [pc, #216]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d061      	beq.n	80024c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d146      	bne.n	8002492 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002404:	4b33      	ldr	r3, [pc, #204]	@ (80024d4 <HAL_RCC_OscConfig+0x4cc>)
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7fe fe61 	bl	80010d0 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7fe fe5d 	bl	80010d0 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e06d      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002424:	4b29      	ldr	r3, [pc, #164]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002438:	d108      	bne.n	800244c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800243a:	4b24      	ldr	r3, [pc, #144]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	4921      	ldr	r1, [pc, #132]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244c:	4b1f      	ldr	r3, [pc, #124]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a19      	ldr	r1, [r3, #32]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	430b      	orrs	r3, r1
 800245e:	491b      	ldr	r1, [pc, #108]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002464:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <HAL_RCC_OscConfig+0x4cc>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7fe fe31 	bl	80010d0 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002472:	f7fe fe2d 	bl	80010d0 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e03d      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002484:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x46a>
 8002490:	e035      	b.n	80024fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002492:	4b10      	ldr	r3, [pc, #64]	@ (80024d4 <HAL_RCC_OscConfig+0x4cc>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fe1a 	bl	80010d0 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7fe fe16 	bl	80010d0 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e026      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x498>
 80024be:	e01e      	b.n	80024fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d107      	bne.n	80024d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e019      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
 80024d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_RCC_OscConfig+0x500>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000

0800250c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0d0      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b6a      	ldr	r3, [pc, #424]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d910      	bls.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b67      	ldr	r3, [pc, #412]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0207 	bic.w	r2, r3, #7
 8002536:	4965      	ldr	r1, [pc, #404]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b63      	ldr	r3, [pc, #396]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0b8      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002568:	4b59      	ldr	r3, [pc, #356]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a58      	ldr	r2, [pc, #352]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002572:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002580:	4b53      	ldr	r3, [pc, #332]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a52      	ldr	r2, [pc, #328]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800258a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258c:	4b50      	ldr	r3, [pc, #320]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	494d      	ldr	r1, [pc, #308]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d040      	beq.n	800262c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b47      	ldr	r3, [pc, #284]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d115      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e07f      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	4b41      	ldr	r3, [pc, #260]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e073      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	4b3d      	ldr	r3, [pc, #244]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e06b      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b39      	ldr	r3, [pc, #228]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4936      	ldr	r1, [pc, #216]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025fc:	f7fe fd68 	bl	80010d0 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7fe fd64 	bl	80010d0 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e053      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	4b2d      	ldr	r3, [pc, #180]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 020c 	and.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d1eb      	bne.n	8002604 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b27      	ldr	r3, [pc, #156]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d210      	bcs.n	800265c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b24      	ldr	r3, [pc, #144]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0207 	bic.w	r2, r3, #7
 8002642:	4922      	ldr	r1, [pc, #136]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b20      	ldr	r3, [pc, #128]	@ (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e032      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002668:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4916      	ldr	r1, [pc, #88]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002686:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	490e      	ldr	r1, [pc, #56]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800269a:	f000 f821 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	490a      	ldr	r1, [pc, #40]	@ (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80026ac:	5ccb      	ldrb	r3, [r1, r3]
 80026ae:	fa22 f303 	lsr.w	r3, r2, r3
 80026b2:	4a09      	ldr	r2, [pc, #36]	@ (80026d8 <HAL_RCC_ClockConfig+0x1cc>)
 80026b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026b6:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <HAL_RCC_ClockConfig+0x1d0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fcc6 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40022000 	.word	0x40022000
 80026d0:	40021000 	.word	0x40021000
 80026d4:	08004d28 	.word	0x08004d28
 80026d8:	20000000 	.word	0x20000000
 80026dc:	20000004 	.word	0x20000004

080026e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x94>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b04      	cmp	r3, #4
 8002708:	d002      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x30>
 800270a:	2b08      	cmp	r3, #8
 800270c:	d003      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x36>
 800270e:	e027      	b.n	8002760 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002710:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x98>)
 8002712:	613b      	str	r3, [r7, #16]
      break;
 8002714:	e027      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	0c9b      	lsrs	r3, r3, #18
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	4a17      	ldr	r2, [pc, #92]	@ (800277c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002720:	5cd3      	ldrb	r3, [r2, r3]
 8002722:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d010      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800272e:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x94>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	0c5b      	lsrs	r3, r3, #17
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	4a11      	ldr	r2, [pc, #68]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xa0>)
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a0d      	ldr	r2, [pc, #52]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x98>)
 8002742:	fb03 f202 	mul.w	r2, r3, r2
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	e004      	b.n	800275a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a0c      	ldr	r2, [pc, #48]	@ (8002784 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002754:	fb02 f303 	mul.w	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	613b      	str	r3, [r7, #16]
      break;
 800275e:	e002      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x98>)
 8002762:	613b      	str	r3, [r7, #16]
      break;
 8002764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002766:	693b      	ldr	r3, [r7, #16]
}
 8002768:	4618      	mov	r0, r3
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	007a1200 	.word	0x007a1200
 800277c:	08004d40 	.word	0x08004d40
 8002780:	08004d50 	.word	0x08004d50
 8002784:	003d0900 	.word	0x003d0900

08002788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800278c:	4b02      	ldr	r3, [pc, #8]	@ (8002798 <HAL_RCC_GetHCLKFreq+0x10>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	20000000 	.word	0x20000000

0800279c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a0:	f7ff fff2 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	4903      	ldr	r1, [pc, #12]	@ (80027c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b2:	5ccb      	ldrb	r3, [r1, r3]
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	08004d38 	.word	0x08004d38

080027c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027c8:	f7ff ffde 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	0adb      	lsrs	r3, r3, #11
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4903      	ldr	r1, [pc, #12]	@ (80027e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000
 80027e8:	08004d38 	.word	0x08004d38

080027ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <RCC_Delay+0x34>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002824 <RCC_Delay+0x38>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0a5b      	lsrs	r3, r3, #9
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002808:	bf00      	nop
  }
  while (Delay --);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1e5a      	subs	r2, r3, #1
 800280e:	60fa      	str	r2, [r7, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f9      	bne.n	8002808 <RCC_Delay+0x1c>
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	20000000 	.word	0x20000000
 8002824:	10624dd3 	.word	0x10624dd3

08002828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e041      	b.n	80028be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe fa9a 	bl	8000d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3304      	adds	r3, #4
 8002864:	4619      	mov	r1, r3
 8002866:	4610      	mov	r0, r2
 8002868:	f000 f940 	bl	8002aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d001      	beq.n	80028e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e032      	b.n	8002946 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a18      	ldr	r2, [pc, #96]	@ (8002950 <HAL_TIM_Base_Start+0x88>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00e      	beq.n	8002910 <HAL_TIM_Base_Start+0x48>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028fa:	d009      	beq.n	8002910 <HAL_TIM_Base_Start+0x48>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a14      	ldr	r2, [pc, #80]	@ (8002954 <HAL_TIM_Base_Start+0x8c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d004      	beq.n	8002910 <HAL_TIM_Base_Start+0x48>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a13      	ldr	r2, [pc, #76]	@ (8002958 <HAL_TIM_Base_Start+0x90>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d111      	bne.n	8002934 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b06      	cmp	r3, #6
 8002920:	d010      	beq.n	8002944 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0201 	orr.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002932:	e007      	b.n	8002944 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	40012c00 	.word	0x40012c00
 8002954:	40000400 	.word	0x40000400
 8002958:	40000800 	.word	0x40000800

0800295c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_TIM_ConfigClockSource+0x1c>
 8002974:	2302      	movs	r3, #2
 8002976:	e0b4      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x186>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800299e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029b0:	d03e      	beq.n	8002a30 <HAL_TIM_ConfigClockSource+0xd4>
 80029b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029b6:	f200 8087 	bhi.w	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029be:	f000 8086 	beq.w	8002ace <HAL_TIM_ConfigClockSource+0x172>
 80029c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029c6:	d87f      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029c8:	2b70      	cmp	r3, #112	@ 0x70
 80029ca:	d01a      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0xa6>
 80029cc:	2b70      	cmp	r3, #112	@ 0x70
 80029ce:	d87b      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029d0:	2b60      	cmp	r3, #96	@ 0x60
 80029d2:	d050      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x11a>
 80029d4:	2b60      	cmp	r3, #96	@ 0x60
 80029d6:	d877      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029d8:	2b50      	cmp	r3, #80	@ 0x50
 80029da:	d03c      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0xfa>
 80029dc:	2b50      	cmp	r3, #80	@ 0x50
 80029de:	d873      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029e0:	2b40      	cmp	r3, #64	@ 0x40
 80029e2:	d058      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x13a>
 80029e4:	2b40      	cmp	r3, #64	@ 0x40
 80029e6:	d86f      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029e8:	2b30      	cmp	r3, #48	@ 0x30
 80029ea:	d064      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80029ec:	2b30      	cmp	r3, #48	@ 0x30
 80029ee:	d86b      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d060      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d867      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d05c      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	d05a      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a00:	e062      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a12:	f000 f950 	bl	8002cb6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	609a      	str	r2, [r3, #8]
      break;
 8002a2e:	e04f      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a40:	f000 f939 	bl	8002cb6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a52:	609a      	str	r2, [r3, #8]
      break;
 8002a54:	e03c      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a62:	461a      	mov	r2, r3
 8002a64:	f000 f8b0 	bl	8002bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2150      	movs	r1, #80	@ 0x50
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f907 	bl	8002c82 <TIM_ITRx_SetConfig>
      break;
 8002a74:	e02c      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a82:	461a      	mov	r2, r3
 8002a84:	f000 f8ce 	bl	8002c24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2160      	movs	r1, #96	@ 0x60
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f8f7 	bl	8002c82 <TIM_ITRx_SetConfig>
      break;
 8002a94:	e01c      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	f000 f890 	bl	8002bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2140      	movs	r1, #64	@ 0x40
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f8e7 	bl	8002c82 <TIM_ITRx_SetConfig>
      break;
 8002ab4:	e00c      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f000 f8de 	bl	8002c82 <TIM_ITRx_SetConfig>
      break;
 8002ac6:	e003      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      break;
 8002acc:	e000      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ace:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a2f      	ldr	r2, [pc, #188]	@ (8002bbc <TIM_Base_SetConfig+0xd0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00b      	beq.n	8002b1c <TIM_Base_SetConfig+0x30>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b0a:	d007      	beq.n	8002b1c <TIM_Base_SetConfig+0x30>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002bc0 <TIM_Base_SetConfig+0xd4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d003      	beq.n	8002b1c <TIM_Base_SetConfig+0x30>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a2b      	ldr	r2, [pc, #172]	@ (8002bc4 <TIM_Base_SetConfig+0xd8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d108      	bne.n	8002b2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a22      	ldr	r2, [pc, #136]	@ (8002bbc <TIM_Base_SetConfig+0xd0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00b      	beq.n	8002b4e <TIM_Base_SetConfig+0x62>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3c:	d007      	beq.n	8002b4e <TIM_Base_SetConfig+0x62>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc0 <TIM_Base_SetConfig+0xd4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d003      	beq.n	8002b4e <TIM_Base_SetConfig+0x62>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc4 <TIM_Base_SetConfig+0xd8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d108      	bne.n	8002b60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a0d      	ldr	r2, [pc, #52]	@ (8002bbc <TIM_Base_SetConfig+0xd0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d103      	bne.n	8002b94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f023 0201 	bic.w	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	611a      	str	r2, [r3, #16]
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	40012c00 	.word	0x40012c00
 8002bc0:	40000400 	.word	0x40000400
 8002bc4:	40000800 	.word	0x40000800

08002bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f023 0201 	bic.w	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f023 030a 	bic.w	r3, r3, #10
 8002c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	621a      	str	r2, [r3, #32]
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	f023 0210 	bic.w	r2, r3, #16
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	031b      	lsls	r3, r3, #12
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	621a      	str	r2, [r3, #32]
}
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b085      	sub	sp, #20
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f043 0307 	orr.w	r3, r3, #7
 8002ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	609a      	str	r2, [r3, #8]
}
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b087      	sub	sp, #28
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	021a      	lsls	r2, r3, #8
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	609a      	str	r2, [r3, #8]
}
 8002cea:	bf00      	nop
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e046      	b.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a16      	ldr	r2, [pc, #88]	@ (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00e      	beq.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d58:	d009      	beq.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a12      	ldr	r2, [pc, #72]	@ (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d004      	beq.n	8002d6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a10      	ldr	r2, [pc, #64]	@ (8002dac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d10c      	bne.n	8002d88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	40012c00 	.word	0x40012c00
 8002da8:	40000400 	.word	0x40000400
 8002dac:	40000800 	.word	0x40000800

08002db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e042      	b.n	8002e48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd fff4 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	@ 0x24
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f971 	bl	80030dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	@ 0x28
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d175      	bne.n	8002f5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_UART_Transmit+0x2c>
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e06e      	b.n	8002f5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2221      	movs	r2, #33	@ 0x21
 8002e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e8e:	f7fe f91f 	bl	80010d0 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ea8:	d108      	bne.n	8002ebc <HAL_UART_Transmit+0x6c>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d104      	bne.n	8002ebc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	e003      	b.n	8002ec4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ec4:	e02e      	b.n	8002f24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2180      	movs	r1, #128	@ 0x80
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f848 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e03a      	b.n	8002f5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10b      	bne.n	8002f06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002efc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	3302      	adds	r3, #2
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	e007      	b.n	8002f16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	3301      	adds	r3, #1
 8002f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1cb      	bne.n	8002ec6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2200      	movs	r2, #0
 8002f36:	2140      	movs	r1, #64	@ 0x40
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f814 	bl	8002f66 <UART_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e006      	b.n	8002f5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e000      	b.n	8002f5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
  }
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3720      	adds	r7, #32
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b086      	sub	sp, #24
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f76:	e03b      	b.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d037      	beq.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f80:	f7fe f8a6 	bl	80010d0 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	6a3a      	ldr	r2, [r7, #32]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d302      	bcc.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e03a      	b.n	8003010 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d023      	beq.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b80      	cmp	r3, #128	@ 0x80
 8002fac:	d020      	beq.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b40      	cmp	r3, #64	@ 0x40
 8002fb2:	d01d      	beq.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d116      	bne.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f81d 	bl	8003018 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e00f      	b.n	8003010 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	429a      	cmp	r2, r3
 800300c:	d0b4      	beq.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003018:	b480      	push	{r7}
 800301a:	b095      	sub	sp, #84	@ 0x54
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330c      	adds	r3, #12
 8003026:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302a:	e853 3f00 	ldrex	r3, [r3]
 800302e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003032:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003036:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	330c      	adds	r3, #12
 800303e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003040:	643a      	str	r2, [r7, #64]	@ 0x40
 8003042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003044:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003046:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003048:	e841 2300 	strex	r3, r2, [r1]
 800304c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800304e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e5      	bne.n	8003020 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3314      	adds	r3, #20
 800305a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	e853 3f00 	ldrex	r3, [r3]
 8003062:	61fb      	str	r3, [r7, #28]
   return(result);
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3314      	adds	r3, #20
 8003072:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003074:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003076:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003078:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800307a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800307c:	e841 2300 	strex	r3, r2, [r1]
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e5      	bne.n	8003054 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	2b01      	cmp	r3, #1
 800308e:	d119      	bne.n	80030c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	e853 3f00 	ldrex	r3, [r3]
 800309e:	60bb      	str	r3, [r7, #8]
   return(result);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f023 0310 	bic.w	r3, r3, #16
 80030a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030b0:	61ba      	str	r2, [r7, #24]
 80030b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b4:	6979      	ldr	r1, [r7, #20]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	e841 2300 	strex	r3, r2, [r1]
 80030bc:	613b      	str	r3, [r7, #16]
   return(result);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e5      	bne.n	8003090 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030d2:	bf00      	nop
 80030d4:	3754      	adds	r7, #84	@ 0x54
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003116:	f023 030c 	bic.w	r3, r3, #12
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	430b      	orrs	r3, r1
 8003122:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a2c      	ldr	r2, [pc, #176]	@ (80031f0 <UART_SetConfig+0x114>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d103      	bne.n	800314c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003144:	f7ff fb3e 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	e002      	b.n	8003152 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800314c:	f7ff fb26 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 8003150:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009a      	lsls	r2, r3, #2
 800315c:	441a      	add	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	4a22      	ldr	r2, [pc, #136]	@ (80031f4 <UART_SetConfig+0x118>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	0119      	lsls	r1, r3, #4
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009a      	lsls	r2, r3, #2
 800317c:	441a      	add	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	fbb2 f2f3 	udiv	r2, r2, r3
 8003188:	4b1a      	ldr	r3, [pc, #104]	@ (80031f4 <UART_SetConfig+0x118>)
 800318a:	fba3 0302 	umull	r0, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2064      	movs	r0, #100	@ 0x64
 8003192:	fb00 f303 	mul.w	r3, r0, r3
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	3332      	adds	r3, #50	@ 0x32
 800319c:	4a15      	ldr	r2, [pc, #84]	@ (80031f4 <UART_SetConfig+0x118>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a8:	4419      	add	r1, r3
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	009a      	lsls	r2, r3, #2
 80031b4:	441a      	add	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c0:	4b0c      	ldr	r3, [pc, #48]	@ (80031f4 <UART_SetConfig+0x118>)
 80031c2:	fba3 0302 	umull	r0, r3, r3, r2
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2064      	movs	r0, #100	@ 0x64
 80031ca:	fb00 f303 	mul.w	r3, r0, r3
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	3332      	adds	r3, #50	@ 0x32
 80031d4:	4a07      	ldr	r2, [pc, #28]	@ (80031f4 <UART_SetConfig+0x118>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	f003 020f 	and.w	r2, r3, #15
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	440a      	add	r2, r1
 80031e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40013800 	.word	0x40013800
 80031f4:	51eb851f 	.word	0x51eb851f

080031f8 <std>:
 80031f8:	2300      	movs	r3, #0
 80031fa:	b510      	push	{r4, lr}
 80031fc:	4604      	mov	r4, r0
 80031fe:	e9c0 3300 	strd	r3, r3, [r0]
 8003202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003206:	6083      	str	r3, [r0, #8]
 8003208:	8181      	strh	r1, [r0, #12]
 800320a:	6643      	str	r3, [r0, #100]	@ 0x64
 800320c:	81c2      	strh	r2, [r0, #14]
 800320e:	6183      	str	r3, [r0, #24]
 8003210:	4619      	mov	r1, r3
 8003212:	2208      	movs	r2, #8
 8003214:	305c      	adds	r0, #92	@ 0x5c
 8003216:	f000 fa35 	bl	8003684 <memset>
 800321a:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <std+0x58>)
 800321c:	6224      	str	r4, [r4, #32]
 800321e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003220:	4b0c      	ldr	r3, [pc, #48]	@ (8003254 <std+0x5c>)
 8003222:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003224:	4b0c      	ldr	r3, [pc, #48]	@ (8003258 <std+0x60>)
 8003226:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003228:	4b0c      	ldr	r3, [pc, #48]	@ (800325c <std+0x64>)
 800322a:	6323      	str	r3, [r4, #48]	@ 0x30
 800322c:	4b0c      	ldr	r3, [pc, #48]	@ (8003260 <std+0x68>)
 800322e:	429c      	cmp	r4, r3
 8003230:	d006      	beq.n	8003240 <std+0x48>
 8003232:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003236:	4294      	cmp	r4, r2
 8003238:	d002      	beq.n	8003240 <std+0x48>
 800323a:	33d0      	adds	r3, #208	@ 0xd0
 800323c:	429c      	cmp	r4, r3
 800323e:	d105      	bne.n	800324c <std+0x54>
 8003240:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003248:	f000 ba94 	b.w	8003774 <__retarget_lock_init_recursive>
 800324c:	bd10      	pop	{r4, pc}
 800324e:	bf00      	nop
 8003250:	080034a1 	.word	0x080034a1
 8003254:	080034c3 	.word	0x080034c3
 8003258:	080034fb 	.word	0x080034fb
 800325c:	0800351f 	.word	0x0800351f
 8003260:	2000058c 	.word	0x2000058c

08003264 <stdio_exit_handler>:
 8003264:	4a02      	ldr	r2, [pc, #8]	@ (8003270 <stdio_exit_handler+0xc>)
 8003266:	4903      	ldr	r1, [pc, #12]	@ (8003274 <stdio_exit_handler+0x10>)
 8003268:	4803      	ldr	r0, [pc, #12]	@ (8003278 <stdio_exit_handler+0x14>)
 800326a:	f000 b869 	b.w	8003340 <_fwalk_sglue>
 800326e:	bf00      	nop
 8003270:	2000000c 	.word	0x2000000c
 8003274:	080042d5 	.word	0x080042d5
 8003278:	2000001c 	.word	0x2000001c

0800327c <cleanup_stdio>:
 800327c:	6841      	ldr	r1, [r0, #4]
 800327e:	4b0c      	ldr	r3, [pc, #48]	@ (80032b0 <cleanup_stdio+0x34>)
 8003280:	b510      	push	{r4, lr}
 8003282:	4299      	cmp	r1, r3
 8003284:	4604      	mov	r4, r0
 8003286:	d001      	beq.n	800328c <cleanup_stdio+0x10>
 8003288:	f001 f824 	bl	80042d4 <_fflush_r>
 800328c:	68a1      	ldr	r1, [r4, #8]
 800328e:	4b09      	ldr	r3, [pc, #36]	@ (80032b4 <cleanup_stdio+0x38>)
 8003290:	4299      	cmp	r1, r3
 8003292:	d002      	beq.n	800329a <cleanup_stdio+0x1e>
 8003294:	4620      	mov	r0, r4
 8003296:	f001 f81d 	bl	80042d4 <_fflush_r>
 800329a:	68e1      	ldr	r1, [r4, #12]
 800329c:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <cleanup_stdio+0x3c>)
 800329e:	4299      	cmp	r1, r3
 80032a0:	d004      	beq.n	80032ac <cleanup_stdio+0x30>
 80032a2:	4620      	mov	r0, r4
 80032a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a8:	f001 b814 	b.w	80042d4 <_fflush_r>
 80032ac:	bd10      	pop	{r4, pc}
 80032ae:	bf00      	nop
 80032b0:	2000058c 	.word	0x2000058c
 80032b4:	200005f4 	.word	0x200005f4
 80032b8:	2000065c 	.word	0x2000065c

080032bc <global_stdio_init.part.0>:
 80032bc:	b510      	push	{r4, lr}
 80032be:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <global_stdio_init.part.0+0x30>)
 80032c0:	4c0b      	ldr	r4, [pc, #44]	@ (80032f0 <global_stdio_init.part.0+0x34>)
 80032c2:	4a0c      	ldr	r2, [pc, #48]	@ (80032f4 <global_stdio_init.part.0+0x38>)
 80032c4:	4620      	mov	r0, r4
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	2104      	movs	r1, #4
 80032ca:	2200      	movs	r2, #0
 80032cc:	f7ff ff94 	bl	80031f8 <std>
 80032d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80032d4:	2201      	movs	r2, #1
 80032d6:	2109      	movs	r1, #9
 80032d8:	f7ff ff8e 	bl	80031f8 <std>
 80032dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80032e0:	2202      	movs	r2, #2
 80032e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032e6:	2112      	movs	r1, #18
 80032e8:	f7ff bf86 	b.w	80031f8 <std>
 80032ec:	200006c4 	.word	0x200006c4
 80032f0:	2000058c 	.word	0x2000058c
 80032f4:	08003265 	.word	0x08003265

080032f8 <__sfp_lock_acquire>:
 80032f8:	4801      	ldr	r0, [pc, #4]	@ (8003300 <__sfp_lock_acquire+0x8>)
 80032fa:	f000 ba3c 	b.w	8003776 <__retarget_lock_acquire_recursive>
 80032fe:	bf00      	nop
 8003300:	200006cd 	.word	0x200006cd

08003304 <__sfp_lock_release>:
 8003304:	4801      	ldr	r0, [pc, #4]	@ (800330c <__sfp_lock_release+0x8>)
 8003306:	f000 ba37 	b.w	8003778 <__retarget_lock_release_recursive>
 800330a:	bf00      	nop
 800330c:	200006cd 	.word	0x200006cd

08003310 <__sinit>:
 8003310:	b510      	push	{r4, lr}
 8003312:	4604      	mov	r4, r0
 8003314:	f7ff fff0 	bl	80032f8 <__sfp_lock_acquire>
 8003318:	6a23      	ldr	r3, [r4, #32]
 800331a:	b11b      	cbz	r3, 8003324 <__sinit+0x14>
 800331c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003320:	f7ff bff0 	b.w	8003304 <__sfp_lock_release>
 8003324:	4b04      	ldr	r3, [pc, #16]	@ (8003338 <__sinit+0x28>)
 8003326:	6223      	str	r3, [r4, #32]
 8003328:	4b04      	ldr	r3, [pc, #16]	@ (800333c <__sinit+0x2c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1f5      	bne.n	800331c <__sinit+0xc>
 8003330:	f7ff ffc4 	bl	80032bc <global_stdio_init.part.0>
 8003334:	e7f2      	b.n	800331c <__sinit+0xc>
 8003336:	bf00      	nop
 8003338:	0800327d 	.word	0x0800327d
 800333c:	200006c4 	.word	0x200006c4

08003340 <_fwalk_sglue>:
 8003340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003344:	4607      	mov	r7, r0
 8003346:	4688      	mov	r8, r1
 8003348:	4614      	mov	r4, r2
 800334a:	2600      	movs	r6, #0
 800334c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003350:	f1b9 0901 	subs.w	r9, r9, #1
 8003354:	d505      	bpl.n	8003362 <_fwalk_sglue+0x22>
 8003356:	6824      	ldr	r4, [r4, #0]
 8003358:	2c00      	cmp	r4, #0
 800335a:	d1f7      	bne.n	800334c <_fwalk_sglue+0xc>
 800335c:	4630      	mov	r0, r6
 800335e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003362:	89ab      	ldrh	r3, [r5, #12]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d907      	bls.n	8003378 <_fwalk_sglue+0x38>
 8003368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800336c:	3301      	adds	r3, #1
 800336e:	d003      	beq.n	8003378 <_fwalk_sglue+0x38>
 8003370:	4629      	mov	r1, r5
 8003372:	4638      	mov	r0, r7
 8003374:	47c0      	blx	r8
 8003376:	4306      	orrs	r6, r0
 8003378:	3568      	adds	r5, #104	@ 0x68
 800337a:	e7e9      	b.n	8003350 <_fwalk_sglue+0x10>

0800337c <iprintf>:
 800337c:	b40f      	push	{r0, r1, r2, r3}
 800337e:	b507      	push	{r0, r1, r2, lr}
 8003380:	4906      	ldr	r1, [pc, #24]	@ (800339c <iprintf+0x20>)
 8003382:	ab04      	add	r3, sp, #16
 8003384:	6808      	ldr	r0, [r1, #0]
 8003386:	f853 2b04 	ldr.w	r2, [r3], #4
 800338a:	6881      	ldr	r1, [r0, #8]
 800338c:	9301      	str	r3, [sp, #4]
 800338e:	f000 fc79 	bl	8003c84 <_vfiprintf_r>
 8003392:	b003      	add	sp, #12
 8003394:	f85d eb04 	ldr.w	lr, [sp], #4
 8003398:	b004      	add	sp, #16
 800339a:	4770      	bx	lr
 800339c:	20000018 	.word	0x20000018

080033a0 <_puts_r>:
 80033a0:	6a03      	ldr	r3, [r0, #32]
 80033a2:	b570      	push	{r4, r5, r6, lr}
 80033a4:	4605      	mov	r5, r0
 80033a6:	460e      	mov	r6, r1
 80033a8:	6884      	ldr	r4, [r0, #8]
 80033aa:	b90b      	cbnz	r3, 80033b0 <_puts_r+0x10>
 80033ac:	f7ff ffb0 	bl	8003310 <__sinit>
 80033b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033b2:	07db      	lsls	r3, r3, #31
 80033b4:	d405      	bmi.n	80033c2 <_puts_r+0x22>
 80033b6:	89a3      	ldrh	r3, [r4, #12]
 80033b8:	0598      	lsls	r0, r3, #22
 80033ba:	d402      	bmi.n	80033c2 <_puts_r+0x22>
 80033bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033be:	f000 f9da 	bl	8003776 <__retarget_lock_acquire_recursive>
 80033c2:	89a3      	ldrh	r3, [r4, #12]
 80033c4:	0719      	lsls	r1, r3, #28
 80033c6:	d502      	bpl.n	80033ce <_puts_r+0x2e>
 80033c8:	6923      	ldr	r3, [r4, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d135      	bne.n	800343a <_puts_r+0x9a>
 80033ce:	4621      	mov	r1, r4
 80033d0:	4628      	mov	r0, r5
 80033d2:	f000 f8e7 	bl	80035a4 <__swsetup_r>
 80033d6:	b380      	cbz	r0, 800343a <_puts_r+0x9a>
 80033d8:	f04f 35ff 	mov.w	r5, #4294967295
 80033dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033de:	07da      	lsls	r2, r3, #31
 80033e0:	d405      	bmi.n	80033ee <_puts_r+0x4e>
 80033e2:	89a3      	ldrh	r3, [r4, #12]
 80033e4:	059b      	lsls	r3, r3, #22
 80033e6:	d402      	bmi.n	80033ee <_puts_r+0x4e>
 80033e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033ea:	f000 f9c5 	bl	8003778 <__retarget_lock_release_recursive>
 80033ee:	4628      	mov	r0, r5
 80033f0:	bd70      	pop	{r4, r5, r6, pc}
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	da04      	bge.n	8003400 <_puts_r+0x60>
 80033f6:	69a2      	ldr	r2, [r4, #24]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	dc17      	bgt.n	800342c <_puts_r+0x8c>
 80033fc:	290a      	cmp	r1, #10
 80033fe:	d015      	beq.n	800342c <_puts_r+0x8c>
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	6022      	str	r2, [r4, #0]
 8003406:	7019      	strb	r1, [r3, #0]
 8003408:	68a3      	ldr	r3, [r4, #8]
 800340a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800340e:	3b01      	subs	r3, #1
 8003410:	60a3      	str	r3, [r4, #8]
 8003412:	2900      	cmp	r1, #0
 8003414:	d1ed      	bne.n	80033f2 <_puts_r+0x52>
 8003416:	2b00      	cmp	r3, #0
 8003418:	da11      	bge.n	800343e <_puts_r+0x9e>
 800341a:	4622      	mov	r2, r4
 800341c:	210a      	movs	r1, #10
 800341e:	4628      	mov	r0, r5
 8003420:	f000 f881 	bl	8003526 <__swbuf_r>
 8003424:	3001      	adds	r0, #1
 8003426:	d0d7      	beq.n	80033d8 <_puts_r+0x38>
 8003428:	250a      	movs	r5, #10
 800342a:	e7d7      	b.n	80033dc <_puts_r+0x3c>
 800342c:	4622      	mov	r2, r4
 800342e:	4628      	mov	r0, r5
 8003430:	f000 f879 	bl	8003526 <__swbuf_r>
 8003434:	3001      	adds	r0, #1
 8003436:	d1e7      	bne.n	8003408 <_puts_r+0x68>
 8003438:	e7ce      	b.n	80033d8 <_puts_r+0x38>
 800343a:	3e01      	subs	r6, #1
 800343c:	e7e4      	b.n	8003408 <_puts_r+0x68>
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	6022      	str	r2, [r4, #0]
 8003444:	220a      	movs	r2, #10
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	e7ee      	b.n	8003428 <_puts_r+0x88>
	...

0800344c <puts>:
 800344c:	4b02      	ldr	r3, [pc, #8]	@ (8003458 <puts+0xc>)
 800344e:	4601      	mov	r1, r0
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	f7ff bfa5 	b.w	80033a0 <_puts_r>
 8003456:	bf00      	nop
 8003458:	20000018 	.word	0x20000018

0800345c <siprintf>:
 800345c:	b40e      	push	{r1, r2, r3}
 800345e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003462:	b510      	push	{r4, lr}
 8003464:	2400      	movs	r4, #0
 8003466:	b09d      	sub	sp, #116	@ 0x74
 8003468:	ab1f      	add	r3, sp, #124	@ 0x7c
 800346a:	9002      	str	r0, [sp, #8]
 800346c:	9006      	str	r0, [sp, #24]
 800346e:	9107      	str	r1, [sp, #28]
 8003470:	9104      	str	r1, [sp, #16]
 8003472:	4809      	ldr	r0, [pc, #36]	@ (8003498 <siprintf+0x3c>)
 8003474:	4909      	ldr	r1, [pc, #36]	@ (800349c <siprintf+0x40>)
 8003476:	f853 2b04 	ldr.w	r2, [r3], #4
 800347a:	9105      	str	r1, [sp, #20]
 800347c:	6800      	ldr	r0, [r0, #0]
 800347e:	a902      	add	r1, sp, #8
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003484:	f000 fada 	bl	8003a3c <_svfiprintf_r>
 8003488:	9b02      	ldr	r3, [sp, #8]
 800348a:	701c      	strb	r4, [r3, #0]
 800348c:	b01d      	add	sp, #116	@ 0x74
 800348e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003492:	b003      	add	sp, #12
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000018 	.word	0x20000018
 800349c:	ffff0208 	.word	0xffff0208

080034a0 <__sread>:
 80034a0:	b510      	push	{r4, lr}
 80034a2:	460c      	mov	r4, r1
 80034a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a8:	f000 f916 	bl	80036d8 <_read_r>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	bfab      	itete	ge
 80034b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80034b2:	89a3      	ldrhlt	r3, [r4, #12]
 80034b4:	181b      	addge	r3, r3, r0
 80034b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80034ba:	bfac      	ite	ge
 80034bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80034be:	81a3      	strhlt	r3, [r4, #12]
 80034c0:	bd10      	pop	{r4, pc}

080034c2 <__swrite>:
 80034c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c6:	461f      	mov	r7, r3
 80034c8:	898b      	ldrh	r3, [r1, #12]
 80034ca:	4605      	mov	r5, r0
 80034cc:	05db      	lsls	r3, r3, #23
 80034ce:	460c      	mov	r4, r1
 80034d0:	4616      	mov	r6, r2
 80034d2:	d505      	bpl.n	80034e0 <__swrite+0x1e>
 80034d4:	2302      	movs	r3, #2
 80034d6:	2200      	movs	r2, #0
 80034d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034dc:	f000 f8ea 	bl	80036b4 <_lseek_r>
 80034e0:	89a3      	ldrh	r3, [r4, #12]
 80034e2:	4632      	mov	r2, r6
 80034e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034e8:	81a3      	strh	r3, [r4, #12]
 80034ea:	4628      	mov	r0, r5
 80034ec:	463b      	mov	r3, r7
 80034ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034f6:	f000 b901 	b.w	80036fc <_write_r>

080034fa <__sseek>:
 80034fa:	b510      	push	{r4, lr}
 80034fc:	460c      	mov	r4, r1
 80034fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003502:	f000 f8d7 	bl	80036b4 <_lseek_r>
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	89a3      	ldrh	r3, [r4, #12]
 800350a:	bf15      	itete	ne
 800350c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800350e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003512:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003516:	81a3      	strheq	r3, [r4, #12]
 8003518:	bf18      	it	ne
 800351a:	81a3      	strhne	r3, [r4, #12]
 800351c:	bd10      	pop	{r4, pc}

0800351e <__sclose>:
 800351e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003522:	f000 b8b7 	b.w	8003694 <_close_r>

08003526 <__swbuf_r>:
 8003526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003528:	460e      	mov	r6, r1
 800352a:	4614      	mov	r4, r2
 800352c:	4605      	mov	r5, r0
 800352e:	b118      	cbz	r0, 8003538 <__swbuf_r+0x12>
 8003530:	6a03      	ldr	r3, [r0, #32]
 8003532:	b90b      	cbnz	r3, 8003538 <__swbuf_r+0x12>
 8003534:	f7ff feec 	bl	8003310 <__sinit>
 8003538:	69a3      	ldr	r3, [r4, #24]
 800353a:	60a3      	str	r3, [r4, #8]
 800353c:	89a3      	ldrh	r3, [r4, #12]
 800353e:	071a      	lsls	r2, r3, #28
 8003540:	d501      	bpl.n	8003546 <__swbuf_r+0x20>
 8003542:	6923      	ldr	r3, [r4, #16]
 8003544:	b943      	cbnz	r3, 8003558 <__swbuf_r+0x32>
 8003546:	4621      	mov	r1, r4
 8003548:	4628      	mov	r0, r5
 800354a:	f000 f82b 	bl	80035a4 <__swsetup_r>
 800354e:	b118      	cbz	r0, 8003558 <__swbuf_r+0x32>
 8003550:	f04f 37ff 	mov.w	r7, #4294967295
 8003554:	4638      	mov	r0, r7
 8003556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	6922      	ldr	r2, [r4, #16]
 800355c:	b2f6      	uxtb	r6, r6
 800355e:	1a98      	subs	r0, r3, r2
 8003560:	6963      	ldr	r3, [r4, #20]
 8003562:	4637      	mov	r7, r6
 8003564:	4283      	cmp	r3, r0
 8003566:	dc05      	bgt.n	8003574 <__swbuf_r+0x4e>
 8003568:	4621      	mov	r1, r4
 800356a:	4628      	mov	r0, r5
 800356c:	f000 feb2 	bl	80042d4 <_fflush_r>
 8003570:	2800      	cmp	r0, #0
 8003572:	d1ed      	bne.n	8003550 <__swbuf_r+0x2a>
 8003574:	68a3      	ldr	r3, [r4, #8]
 8003576:	3b01      	subs	r3, #1
 8003578:	60a3      	str	r3, [r4, #8]
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	6022      	str	r2, [r4, #0]
 8003580:	701e      	strb	r6, [r3, #0]
 8003582:	6962      	ldr	r2, [r4, #20]
 8003584:	1c43      	adds	r3, r0, #1
 8003586:	429a      	cmp	r2, r3
 8003588:	d004      	beq.n	8003594 <__swbuf_r+0x6e>
 800358a:	89a3      	ldrh	r3, [r4, #12]
 800358c:	07db      	lsls	r3, r3, #31
 800358e:	d5e1      	bpl.n	8003554 <__swbuf_r+0x2e>
 8003590:	2e0a      	cmp	r6, #10
 8003592:	d1df      	bne.n	8003554 <__swbuf_r+0x2e>
 8003594:	4621      	mov	r1, r4
 8003596:	4628      	mov	r0, r5
 8003598:	f000 fe9c 	bl	80042d4 <_fflush_r>
 800359c:	2800      	cmp	r0, #0
 800359e:	d0d9      	beq.n	8003554 <__swbuf_r+0x2e>
 80035a0:	e7d6      	b.n	8003550 <__swbuf_r+0x2a>
	...

080035a4 <__swsetup_r>:
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	4b29      	ldr	r3, [pc, #164]	@ (800364c <__swsetup_r+0xa8>)
 80035a8:	4605      	mov	r5, r0
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	460c      	mov	r4, r1
 80035ae:	b118      	cbz	r0, 80035b8 <__swsetup_r+0x14>
 80035b0:	6a03      	ldr	r3, [r0, #32]
 80035b2:	b90b      	cbnz	r3, 80035b8 <__swsetup_r+0x14>
 80035b4:	f7ff feac 	bl	8003310 <__sinit>
 80035b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035bc:	0719      	lsls	r1, r3, #28
 80035be:	d422      	bmi.n	8003606 <__swsetup_r+0x62>
 80035c0:	06da      	lsls	r2, r3, #27
 80035c2:	d407      	bmi.n	80035d4 <__swsetup_r+0x30>
 80035c4:	2209      	movs	r2, #9
 80035c6:	602a      	str	r2, [r5, #0]
 80035c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	81a3      	strh	r3, [r4, #12]
 80035d2:	e033      	b.n	800363c <__swsetup_r+0x98>
 80035d4:	0758      	lsls	r0, r3, #29
 80035d6:	d512      	bpl.n	80035fe <__swsetup_r+0x5a>
 80035d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80035da:	b141      	cbz	r1, 80035ee <__swsetup_r+0x4a>
 80035dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80035e0:	4299      	cmp	r1, r3
 80035e2:	d002      	beq.n	80035ea <__swsetup_r+0x46>
 80035e4:	4628      	mov	r0, r5
 80035e6:	f000 f8d7 	bl	8003798 <_free_r>
 80035ea:	2300      	movs	r3, #0
 80035ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80035ee:	89a3      	ldrh	r3, [r4, #12]
 80035f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80035f4:	81a3      	strh	r3, [r4, #12]
 80035f6:	2300      	movs	r3, #0
 80035f8:	6063      	str	r3, [r4, #4]
 80035fa:	6923      	ldr	r3, [r4, #16]
 80035fc:	6023      	str	r3, [r4, #0]
 80035fe:	89a3      	ldrh	r3, [r4, #12]
 8003600:	f043 0308 	orr.w	r3, r3, #8
 8003604:	81a3      	strh	r3, [r4, #12]
 8003606:	6923      	ldr	r3, [r4, #16]
 8003608:	b94b      	cbnz	r3, 800361e <__swsetup_r+0x7a>
 800360a:	89a3      	ldrh	r3, [r4, #12]
 800360c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003614:	d003      	beq.n	800361e <__swsetup_r+0x7a>
 8003616:	4621      	mov	r1, r4
 8003618:	4628      	mov	r0, r5
 800361a:	f000 fea8 	bl	800436e <__smakebuf_r>
 800361e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003622:	f013 0201 	ands.w	r2, r3, #1
 8003626:	d00a      	beq.n	800363e <__swsetup_r+0x9a>
 8003628:	2200      	movs	r2, #0
 800362a:	60a2      	str	r2, [r4, #8]
 800362c:	6962      	ldr	r2, [r4, #20]
 800362e:	4252      	negs	r2, r2
 8003630:	61a2      	str	r2, [r4, #24]
 8003632:	6922      	ldr	r2, [r4, #16]
 8003634:	b942      	cbnz	r2, 8003648 <__swsetup_r+0xa4>
 8003636:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800363a:	d1c5      	bne.n	80035c8 <__swsetup_r+0x24>
 800363c:	bd38      	pop	{r3, r4, r5, pc}
 800363e:	0799      	lsls	r1, r3, #30
 8003640:	bf58      	it	pl
 8003642:	6962      	ldrpl	r2, [r4, #20]
 8003644:	60a2      	str	r2, [r4, #8]
 8003646:	e7f4      	b.n	8003632 <__swsetup_r+0x8e>
 8003648:	2000      	movs	r0, #0
 800364a:	e7f7      	b.n	800363c <__swsetup_r+0x98>
 800364c:	20000018 	.word	0x20000018

08003650 <memmove>:
 8003650:	4288      	cmp	r0, r1
 8003652:	b510      	push	{r4, lr}
 8003654:	eb01 0402 	add.w	r4, r1, r2
 8003658:	d902      	bls.n	8003660 <memmove+0x10>
 800365a:	4284      	cmp	r4, r0
 800365c:	4623      	mov	r3, r4
 800365e:	d807      	bhi.n	8003670 <memmove+0x20>
 8003660:	1e43      	subs	r3, r0, #1
 8003662:	42a1      	cmp	r1, r4
 8003664:	d008      	beq.n	8003678 <memmove+0x28>
 8003666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800366a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800366e:	e7f8      	b.n	8003662 <memmove+0x12>
 8003670:	4601      	mov	r1, r0
 8003672:	4402      	add	r2, r0
 8003674:	428a      	cmp	r2, r1
 8003676:	d100      	bne.n	800367a <memmove+0x2a>
 8003678:	bd10      	pop	{r4, pc}
 800367a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800367e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003682:	e7f7      	b.n	8003674 <memmove+0x24>

08003684 <memset>:
 8003684:	4603      	mov	r3, r0
 8003686:	4402      	add	r2, r0
 8003688:	4293      	cmp	r3, r2
 800368a:	d100      	bne.n	800368e <memset+0xa>
 800368c:	4770      	bx	lr
 800368e:	f803 1b01 	strb.w	r1, [r3], #1
 8003692:	e7f9      	b.n	8003688 <memset+0x4>

08003694 <_close_r>:
 8003694:	b538      	push	{r3, r4, r5, lr}
 8003696:	2300      	movs	r3, #0
 8003698:	4d05      	ldr	r5, [pc, #20]	@ (80036b0 <_close_r+0x1c>)
 800369a:	4604      	mov	r4, r0
 800369c:	4608      	mov	r0, r1
 800369e:	602b      	str	r3, [r5, #0]
 80036a0:	f7fd fc2c 	bl	8000efc <_close>
 80036a4:	1c43      	adds	r3, r0, #1
 80036a6:	d102      	bne.n	80036ae <_close_r+0x1a>
 80036a8:	682b      	ldr	r3, [r5, #0]
 80036aa:	b103      	cbz	r3, 80036ae <_close_r+0x1a>
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	bd38      	pop	{r3, r4, r5, pc}
 80036b0:	200006c8 	.word	0x200006c8

080036b4 <_lseek_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4604      	mov	r4, r0
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	2200      	movs	r2, #0
 80036be:	4d05      	ldr	r5, [pc, #20]	@ (80036d4 <_lseek_r+0x20>)
 80036c0:	602a      	str	r2, [r5, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f7fd fc3e 	bl	8000f44 <_lseek>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d102      	bne.n	80036d2 <_lseek_r+0x1e>
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	b103      	cbz	r3, 80036d2 <_lseek_r+0x1e>
 80036d0:	6023      	str	r3, [r4, #0]
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
 80036d4:	200006c8 	.word	0x200006c8

080036d8 <_read_r>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	4604      	mov	r4, r0
 80036dc:	4608      	mov	r0, r1
 80036de:	4611      	mov	r1, r2
 80036e0:	2200      	movs	r2, #0
 80036e2:	4d05      	ldr	r5, [pc, #20]	@ (80036f8 <_read_r+0x20>)
 80036e4:	602a      	str	r2, [r5, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f7fd fbeb 	bl	8000ec2 <_read>
 80036ec:	1c43      	adds	r3, r0, #1
 80036ee:	d102      	bne.n	80036f6 <_read_r+0x1e>
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	b103      	cbz	r3, 80036f6 <_read_r+0x1e>
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	bd38      	pop	{r3, r4, r5, pc}
 80036f8:	200006c8 	.word	0x200006c8

080036fc <_write_r>:
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	4604      	mov	r4, r0
 8003700:	4608      	mov	r0, r1
 8003702:	4611      	mov	r1, r2
 8003704:	2200      	movs	r2, #0
 8003706:	4d05      	ldr	r5, [pc, #20]	@ (800371c <_write_r+0x20>)
 8003708:	602a      	str	r2, [r5, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	f7fc feb0 	bl	8000470 <_write>
 8003710:	1c43      	adds	r3, r0, #1
 8003712:	d102      	bne.n	800371a <_write_r+0x1e>
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	b103      	cbz	r3, 800371a <_write_r+0x1e>
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	bd38      	pop	{r3, r4, r5, pc}
 800371c:	200006c8 	.word	0x200006c8

08003720 <__errno>:
 8003720:	4b01      	ldr	r3, [pc, #4]	@ (8003728 <__errno+0x8>)
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20000018 	.word	0x20000018

0800372c <__libc_init_array>:
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	2600      	movs	r6, #0
 8003730:	4d0c      	ldr	r5, [pc, #48]	@ (8003764 <__libc_init_array+0x38>)
 8003732:	4c0d      	ldr	r4, [pc, #52]	@ (8003768 <__libc_init_array+0x3c>)
 8003734:	1b64      	subs	r4, r4, r5
 8003736:	10a4      	asrs	r4, r4, #2
 8003738:	42a6      	cmp	r6, r4
 800373a:	d109      	bne.n	8003750 <__libc_init_array+0x24>
 800373c:	f000 feca 	bl	80044d4 <_init>
 8003740:	2600      	movs	r6, #0
 8003742:	4d0a      	ldr	r5, [pc, #40]	@ (800376c <__libc_init_array+0x40>)
 8003744:	4c0a      	ldr	r4, [pc, #40]	@ (8003770 <__libc_init_array+0x44>)
 8003746:	1b64      	subs	r4, r4, r5
 8003748:	10a4      	asrs	r4, r4, #2
 800374a:	42a6      	cmp	r6, r4
 800374c:	d105      	bne.n	800375a <__libc_init_array+0x2e>
 800374e:	bd70      	pop	{r4, r5, r6, pc}
 8003750:	f855 3b04 	ldr.w	r3, [r5], #4
 8003754:	4798      	blx	r3
 8003756:	3601      	adds	r6, #1
 8003758:	e7ee      	b.n	8003738 <__libc_init_array+0xc>
 800375a:	f855 3b04 	ldr.w	r3, [r5], #4
 800375e:	4798      	blx	r3
 8003760:	3601      	adds	r6, #1
 8003762:	e7f2      	b.n	800374a <__libc_init_array+0x1e>
 8003764:	08004d88 	.word	0x08004d88
 8003768:	08004d88 	.word	0x08004d88
 800376c:	08004d88 	.word	0x08004d88
 8003770:	08004d8c 	.word	0x08004d8c

08003774 <__retarget_lock_init_recursive>:
 8003774:	4770      	bx	lr

08003776 <__retarget_lock_acquire_recursive>:
 8003776:	4770      	bx	lr

08003778 <__retarget_lock_release_recursive>:
 8003778:	4770      	bx	lr

0800377a <memcpy>:
 800377a:	440a      	add	r2, r1
 800377c:	4291      	cmp	r1, r2
 800377e:	f100 33ff 	add.w	r3, r0, #4294967295
 8003782:	d100      	bne.n	8003786 <memcpy+0xc>
 8003784:	4770      	bx	lr
 8003786:	b510      	push	{r4, lr}
 8003788:	f811 4b01 	ldrb.w	r4, [r1], #1
 800378c:	4291      	cmp	r1, r2
 800378e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003792:	d1f9      	bne.n	8003788 <memcpy+0xe>
 8003794:	bd10      	pop	{r4, pc}
	...

08003798 <_free_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4605      	mov	r5, r0
 800379c:	2900      	cmp	r1, #0
 800379e:	d040      	beq.n	8003822 <_free_r+0x8a>
 80037a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037a4:	1f0c      	subs	r4, r1, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bfb8      	it	lt
 80037aa:	18e4      	addlt	r4, r4, r3
 80037ac:	f000 f8de 	bl	800396c <__malloc_lock>
 80037b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003824 <_free_r+0x8c>)
 80037b2:	6813      	ldr	r3, [r2, #0]
 80037b4:	b933      	cbnz	r3, 80037c4 <_free_r+0x2c>
 80037b6:	6063      	str	r3, [r4, #4]
 80037b8:	6014      	str	r4, [r2, #0]
 80037ba:	4628      	mov	r0, r5
 80037bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037c0:	f000 b8da 	b.w	8003978 <__malloc_unlock>
 80037c4:	42a3      	cmp	r3, r4
 80037c6:	d908      	bls.n	80037da <_free_r+0x42>
 80037c8:	6820      	ldr	r0, [r4, #0]
 80037ca:	1821      	adds	r1, r4, r0
 80037cc:	428b      	cmp	r3, r1
 80037ce:	bf01      	itttt	eq
 80037d0:	6819      	ldreq	r1, [r3, #0]
 80037d2:	685b      	ldreq	r3, [r3, #4]
 80037d4:	1809      	addeq	r1, r1, r0
 80037d6:	6021      	streq	r1, [r4, #0]
 80037d8:	e7ed      	b.n	80037b6 <_free_r+0x1e>
 80037da:	461a      	mov	r2, r3
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	b10b      	cbz	r3, 80037e4 <_free_r+0x4c>
 80037e0:	42a3      	cmp	r3, r4
 80037e2:	d9fa      	bls.n	80037da <_free_r+0x42>
 80037e4:	6811      	ldr	r1, [r2, #0]
 80037e6:	1850      	adds	r0, r2, r1
 80037e8:	42a0      	cmp	r0, r4
 80037ea:	d10b      	bne.n	8003804 <_free_r+0x6c>
 80037ec:	6820      	ldr	r0, [r4, #0]
 80037ee:	4401      	add	r1, r0
 80037f0:	1850      	adds	r0, r2, r1
 80037f2:	4283      	cmp	r3, r0
 80037f4:	6011      	str	r1, [r2, #0]
 80037f6:	d1e0      	bne.n	80037ba <_free_r+0x22>
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	4408      	add	r0, r1
 80037fe:	6010      	str	r0, [r2, #0]
 8003800:	6053      	str	r3, [r2, #4]
 8003802:	e7da      	b.n	80037ba <_free_r+0x22>
 8003804:	d902      	bls.n	800380c <_free_r+0x74>
 8003806:	230c      	movs	r3, #12
 8003808:	602b      	str	r3, [r5, #0]
 800380a:	e7d6      	b.n	80037ba <_free_r+0x22>
 800380c:	6820      	ldr	r0, [r4, #0]
 800380e:	1821      	adds	r1, r4, r0
 8003810:	428b      	cmp	r3, r1
 8003812:	bf01      	itttt	eq
 8003814:	6819      	ldreq	r1, [r3, #0]
 8003816:	685b      	ldreq	r3, [r3, #4]
 8003818:	1809      	addeq	r1, r1, r0
 800381a:	6021      	streq	r1, [r4, #0]
 800381c:	6063      	str	r3, [r4, #4]
 800381e:	6054      	str	r4, [r2, #4]
 8003820:	e7cb      	b.n	80037ba <_free_r+0x22>
 8003822:	bd38      	pop	{r3, r4, r5, pc}
 8003824:	200006d4 	.word	0x200006d4

08003828 <sbrk_aligned>:
 8003828:	b570      	push	{r4, r5, r6, lr}
 800382a:	4e0f      	ldr	r6, [pc, #60]	@ (8003868 <sbrk_aligned+0x40>)
 800382c:	460c      	mov	r4, r1
 800382e:	6831      	ldr	r1, [r6, #0]
 8003830:	4605      	mov	r5, r0
 8003832:	b911      	cbnz	r1, 800383a <sbrk_aligned+0x12>
 8003834:	f000 fdfa 	bl	800442c <_sbrk_r>
 8003838:	6030      	str	r0, [r6, #0]
 800383a:	4621      	mov	r1, r4
 800383c:	4628      	mov	r0, r5
 800383e:	f000 fdf5 	bl	800442c <_sbrk_r>
 8003842:	1c43      	adds	r3, r0, #1
 8003844:	d103      	bne.n	800384e <sbrk_aligned+0x26>
 8003846:	f04f 34ff 	mov.w	r4, #4294967295
 800384a:	4620      	mov	r0, r4
 800384c:	bd70      	pop	{r4, r5, r6, pc}
 800384e:	1cc4      	adds	r4, r0, #3
 8003850:	f024 0403 	bic.w	r4, r4, #3
 8003854:	42a0      	cmp	r0, r4
 8003856:	d0f8      	beq.n	800384a <sbrk_aligned+0x22>
 8003858:	1a21      	subs	r1, r4, r0
 800385a:	4628      	mov	r0, r5
 800385c:	f000 fde6 	bl	800442c <_sbrk_r>
 8003860:	3001      	adds	r0, #1
 8003862:	d1f2      	bne.n	800384a <sbrk_aligned+0x22>
 8003864:	e7ef      	b.n	8003846 <sbrk_aligned+0x1e>
 8003866:	bf00      	nop
 8003868:	200006d0 	.word	0x200006d0

0800386c <_malloc_r>:
 800386c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003870:	1ccd      	adds	r5, r1, #3
 8003872:	f025 0503 	bic.w	r5, r5, #3
 8003876:	3508      	adds	r5, #8
 8003878:	2d0c      	cmp	r5, #12
 800387a:	bf38      	it	cc
 800387c:	250c      	movcc	r5, #12
 800387e:	2d00      	cmp	r5, #0
 8003880:	4606      	mov	r6, r0
 8003882:	db01      	blt.n	8003888 <_malloc_r+0x1c>
 8003884:	42a9      	cmp	r1, r5
 8003886:	d904      	bls.n	8003892 <_malloc_r+0x26>
 8003888:	230c      	movs	r3, #12
 800388a:	6033      	str	r3, [r6, #0]
 800388c:	2000      	movs	r0, #0
 800388e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003892:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003968 <_malloc_r+0xfc>
 8003896:	f000 f869 	bl	800396c <__malloc_lock>
 800389a:	f8d8 3000 	ldr.w	r3, [r8]
 800389e:	461c      	mov	r4, r3
 80038a0:	bb44      	cbnz	r4, 80038f4 <_malloc_r+0x88>
 80038a2:	4629      	mov	r1, r5
 80038a4:	4630      	mov	r0, r6
 80038a6:	f7ff ffbf 	bl	8003828 <sbrk_aligned>
 80038aa:	1c43      	adds	r3, r0, #1
 80038ac:	4604      	mov	r4, r0
 80038ae:	d158      	bne.n	8003962 <_malloc_r+0xf6>
 80038b0:	f8d8 4000 	ldr.w	r4, [r8]
 80038b4:	4627      	mov	r7, r4
 80038b6:	2f00      	cmp	r7, #0
 80038b8:	d143      	bne.n	8003942 <_malloc_r+0xd6>
 80038ba:	2c00      	cmp	r4, #0
 80038bc:	d04b      	beq.n	8003956 <_malloc_r+0xea>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	4639      	mov	r1, r7
 80038c2:	4630      	mov	r0, r6
 80038c4:	eb04 0903 	add.w	r9, r4, r3
 80038c8:	f000 fdb0 	bl	800442c <_sbrk_r>
 80038cc:	4581      	cmp	r9, r0
 80038ce:	d142      	bne.n	8003956 <_malloc_r+0xea>
 80038d0:	6821      	ldr	r1, [r4, #0]
 80038d2:	4630      	mov	r0, r6
 80038d4:	1a6d      	subs	r5, r5, r1
 80038d6:	4629      	mov	r1, r5
 80038d8:	f7ff ffa6 	bl	8003828 <sbrk_aligned>
 80038dc:	3001      	adds	r0, #1
 80038de:	d03a      	beq.n	8003956 <_malloc_r+0xea>
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	442b      	add	r3, r5
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	f8d8 3000 	ldr.w	r3, [r8]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	bb62      	cbnz	r2, 8003948 <_malloc_r+0xdc>
 80038ee:	f8c8 7000 	str.w	r7, [r8]
 80038f2:	e00f      	b.n	8003914 <_malloc_r+0xa8>
 80038f4:	6822      	ldr	r2, [r4, #0]
 80038f6:	1b52      	subs	r2, r2, r5
 80038f8:	d420      	bmi.n	800393c <_malloc_r+0xd0>
 80038fa:	2a0b      	cmp	r2, #11
 80038fc:	d917      	bls.n	800392e <_malloc_r+0xc2>
 80038fe:	1961      	adds	r1, r4, r5
 8003900:	42a3      	cmp	r3, r4
 8003902:	6025      	str	r5, [r4, #0]
 8003904:	bf18      	it	ne
 8003906:	6059      	strne	r1, [r3, #4]
 8003908:	6863      	ldr	r3, [r4, #4]
 800390a:	bf08      	it	eq
 800390c:	f8c8 1000 	streq.w	r1, [r8]
 8003910:	5162      	str	r2, [r4, r5]
 8003912:	604b      	str	r3, [r1, #4]
 8003914:	4630      	mov	r0, r6
 8003916:	f000 f82f 	bl	8003978 <__malloc_unlock>
 800391a:	f104 000b 	add.w	r0, r4, #11
 800391e:	1d23      	adds	r3, r4, #4
 8003920:	f020 0007 	bic.w	r0, r0, #7
 8003924:	1ac2      	subs	r2, r0, r3
 8003926:	bf1c      	itt	ne
 8003928:	1a1b      	subne	r3, r3, r0
 800392a:	50a3      	strne	r3, [r4, r2]
 800392c:	e7af      	b.n	800388e <_malloc_r+0x22>
 800392e:	6862      	ldr	r2, [r4, #4]
 8003930:	42a3      	cmp	r3, r4
 8003932:	bf0c      	ite	eq
 8003934:	f8c8 2000 	streq.w	r2, [r8]
 8003938:	605a      	strne	r2, [r3, #4]
 800393a:	e7eb      	b.n	8003914 <_malloc_r+0xa8>
 800393c:	4623      	mov	r3, r4
 800393e:	6864      	ldr	r4, [r4, #4]
 8003940:	e7ae      	b.n	80038a0 <_malloc_r+0x34>
 8003942:	463c      	mov	r4, r7
 8003944:	687f      	ldr	r7, [r7, #4]
 8003946:	e7b6      	b.n	80038b6 <_malloc_r+0x4a>
 8003948:	461a      	mov	r2, r3
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	42a3      	cmp	r3, r4
 800394e:	d1fb      	bne.n	8003948 <_malloc_r+0xdc>
 8003950:	2300      	movs	r3, #0
 8003952:	6053      	str	r3, [r2, #4]
 8003954:	e7de      	b.n	8003914 <_malloc_r+0xa8>
 8003956:	230c      	movs	r3, #12
 8003958:	4630      	mov	r0, r6
 800395a:	6033      	str	r3, [r6, #0]
 800395c:	f000 f80c 	bl	8003978 <__malloc_unlock>
 8003960:	e794      	b.n	800388c <_malloc_r+0x20>
 8003962:	6005      	str	r5, [r0, #0]
 8003964:	e7d6      	b.n	8003914 <_malloc_r+0xa8>
 8003966:	bf00      	nop
 8003968:	200006d4 	.word	0x200006d4

0800396c <__malloc_lock>:
 800396c:	4801      	ldr	r0, [pc, #4]	@ (8003974 <__malloc_lock+0x8>)
 800396e:	f7ff bf02 	b.w	8003776 <__retarget_lock_acquire_recursive>
 8003972:	bf00      	nop
 8003974:	200006cc 	.word	0x200006cc

08003978 <__malloc_unlock>:
 8003978:	4801      	ldr	r0, [pc, #4]	@ (8003980 <__malloc_unlock+0x8>)
 800397a:	f7ff befd 	b.w	8003778 <__retarget_lock_release_recursive>
 800397e:	bf00      	nop
 8003980:	200006cc 	.word	0x200006cc

08003984 <__ssputs_r>:
 8003984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003988:	461f      	mov	r7, r3
 800398a:	688e      	ldr	r6, [r1, #8]
 800398c:	4682      	mov	sl, r0
 800398e:	42be      	cmp	r6, r7
 8003990:	460c      	mov	r4, r1
 8003992:	4690      	mov	r8, r2
 8003994:	680b      	ldr	r3, [r1, #0]
 8003996:	d82d      	bhi.n	80039f4 <__ssputs_r+0x70>
 8003998:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800399c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80039a0:	d026      	beq.n	80039f0 <__ssputs_r+0x6c>
 80039a2:	6965      	ldr	r5, [r4, #20]
 80039a4:	6909      	ldr	r1, [r1, #16]
 80039a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039aa:	eba3 0901 	sub.w	r9, r3, r1
 80039ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039b2:	1c7b      	adds	r3, r7, #1
 80039b4:	444b      	add	r3, r9
 80039b6:	106d      	asrs	r5, r5, #1
 80039b8:	429d      	cmp	r5, r3
 80039ba:	bf38      	it	cc
 80039bc:	461d      	movcc	r5, r3
 80039be:	0553      	lsls	r3, r2, #21
 80039c0:	d527      	bpl.n	8003a12 <__ssputs_r+0x8e>
 80039c2:	4629      	mov	r1, r5
 80039c4:	f7ff ff52 	bl	800386c <_malloc_r>
 80039c8:	4606      	mov	r6, r0
 80039ca:	b360      	cbz	r0, 8003a26 <__ssputs_r+0xa2>
 80039cc:	464a      	mov	r2, r9
 80039ce:	6921      	ldr	r1, [r4, #16]
 80039d0:	f7ff fed3 	bl	800377a <memcpy>
 80039d4:	89a3      	ldrh	r3, [r4, #12]
 80039d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039de:	81a3      	strh	r3, [r4, #12]
 80039e0:	6126      	str	r6, [r4, #16]
 80039e2:	444e      	add	r6, r9
 80039e4:	6026      	str	r6, [r4, #0]
 80039e6:	463e      	mov	r6, r7
 80039e8:	6165      	str	r5, [r4, #20]
 80039ea:	eba5 0509 	sub.w	r5, r5, r9
 80039ee:	60a5      	str	r5, [r4, #8]
 80039f0:	42be      	cmp	r6, r7
 80039f2:	d900      	bls.n	80039f6 <__ssputs_r+0x72>
 80039f4:	463e      	mov	r6, r7
 80039f6:	4632      	mov	r2, r6
 80039f8:	4641      	mov	r1, r8
 80039fa:	6820      	ldr	r0, [r4, #0]
 80039fc:	f7ff fe28 	bl	8003650 <memmove>
 8003a00:	2000      	movs	r0, #0
 8003a02:	68a3      	ldr	r3, [r4, #8]
 8003a04:	1b9b      	subs	r3, r3, r6
 8003a06:	60a3      	str	r3, [r4, #8]
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	4433      	add	r3, r6
 8003a0c:	6023      	str	r3, [r4, #0]
 8003a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a12:	462a      	mov	r2, r5
 8003a14:	f000 fd28 	bl	8004468 <_realloc_r>
 8003a18:	4606      	mov	r6, r0
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d1e0      	bne.n	80039e0 <__ssputs_r+0x5c>
 8003a1e:	4650      	mov	r0, sl
 8003a20:	6921      	ldr	r1, [r4, #16]
 8003a22:	f7ff feb9 	bl	8003798 <_free_r>
 8003a26:	230c      	movs	r3, #12
 8003a28:	f8ca 3000 	str.w	r3, [sl]
 8003a2c:	89a3      	ldrh	r3, [r4, #12]
 8003a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a36:	81a3      	strh	r3, [r4, #12]
 8003a38:	e7e9      	b.n	8003a0e <__ssputs_r+0x8a>
	...

08003a3c <_svfiprintf_r>:
 8003a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a40:	4698      	mov	r8, r3
 8003a42:	898b      	ldrh	r3, [r1, #12]
 8003a44:	4607      	mov	r7, r0
 8003a46:	061b      	lsls	r3, r3, #24
 8003a48:	460d      	mov	r5, r1
 8003a4a:	4614      	mov	r4, r2
 8003a4c:	b09d      	sub	sp, #116	@ 0x74
 8003a4e:	d510      	bpl.n	8003a72 <_svfiprintf_r+0x36>
 8003a50:	690b      	ldr	r3, [r1, #16]
 8003a52:	b973      	cbnz	r3, 8003a72 <_svfiprintf_r+0x36>
 8003a54:	2140      	movs	r1, #64	@ 0x40
 8003a56:	f7ff ff09 	bl	800386c <_malloc_r>
 8003a5a:	6028      	str	r0, [r5, #0]
 8003a5c:	6128      	str	r0, [r5, #16]
 8003a5e:	b930      	cbnz	r0, 8003a6e <_svfiprintf_r+0x32>
 8003a60:	230c      	movs	r3, #12
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	b01d      	add	sp, #116	@ 0x74
 8003a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a6e:	2340      	movs	r3, #64	@ 0x40
 8003a70:	616b      	str	r3, [r5, #20]
 8003a72:	2300      	movs	r3, #0
 8003a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a76:	2320      	movs	r3, #32
 8003a78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a7c:	2330      	movs	r3, #48	@ 0x30
 8003a7e:	f04f 0901 	mov.w	r9, #1
 8003a82:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a86:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003c20 <_svfiprintf_r+0x1e4>
 8003a8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a8e:	4623      	mov	r3, r4
 8003a90:	469a      	mov	sl, r3
 8003a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a96:	b10a      	cbz	r2, 8003a9c <_svfiprintf_r+0x60>
 8003a98:	2a25      	cmp	r2, #37	@ 0x25
 8003a9a:	d1f9      	bne.n	8003a90 <_svfiprintf_r+0x54>
 8003a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8003aa0:	d00b      	beq.n	8003aba <_svfiprintf_r+0x7e>
 8003aa2:	465b      	mov	r3, fp
 8003aa4:	4622      	mov	r2, r4
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	4638      	mov	r0, r7
 8003aaa:	f7ff ff6b 	bl	8003984 <__ssputs_r>
 8003aae:	3001      	adds	r0, #1
 8003ab0:	f000 80a7 	beq.w	8003c02 <_svfiprintf_r+0x1c6>
 8003ab4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ab6:	445a      	add	r2, fp
 8003ab8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003aba:	f89a 3000 	ldrb.w	r3, [sl]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 809f 	beq.w	8003c02 <_svfiprintf_r+0x1c6>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ace:	f10a 0a01 	add.w	sl, sl, #1
 8003ad2:	9304      	str	r3, [sp, #16]
 8003ad4:	9307      	str	r3, [sp, #28]
 8003ad6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ada:	931a      	str	r3, [sp, #104]	@ 0x68
 8003adc:	4654      	mov	r4, sl
 8003ade:	2205      	movs	r2, #5
 8003ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ae4:	484e      	ldr	r0, [pc, #312]	@ (8003c20 <_svfiprintf_r+0x1e4>)
 8003ae6:	f000 fcb1 	bl	800444c <memchr>
 8003aea:	9a04      	ldr	r2, [sp, #16]
 8003aec:	b9d8      	cbnz	r0, 8003b26 <_svfiprintf_r+0xea>
 8003aee:	06d0      	lsls	r0, r2, #27
 8003af0:	bf44      	itt	mi
 8003af2:	2320      	movmi	r3, #32
 8003af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003af8:	0711      	lsls	r1, r2, #28
 8003afa:	bf44      	itt	mi
 8003afc:	232b      	movmi	r3, #43	@ 0x2b
 8003afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b02:	f89a 3000 	ldrb.w	r3, [sl]
 8003b06:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b08:	d015      	beq.n	8003b36 <_svfiprintf_r+0xfa>
 8003b0a:	4654      	mov	r4, sl
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f04f 0c0a 	mov.w	ip, #10
 8003b12:	9a07      	ldr	r2, [sp, #28]
 8003b14:	4621      	mov	r1, r4
 8003b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b1a:	3b30      	subs	r3, #48	@ 0x30
 8003b1c:	2b09      	cmp	r3, #9
 8003b1e:	d94b      	bls.n	8003bb8 <_svfiprintf_r+0x17c>
 8003b20:	b1b0      	cbz	r0, 8003b50 <_svfiprintf_r+0x114>
 8003b22:	9207      	str	r2, [sp, #28]
 8003b24:	e014      	b.n	8003b50 <_svfiprintf_r+0x114>
 8003b26:	eba0 0308 	sub.w	r3, r0, r8
 8003b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	46a2      	mov	sl, r4
 8003b32:	9304      	str	r3, [sp, #16]
 8003b34:	e7d2      	b.n	8003adc <_svfiprintf_r+0xa0>
 8003b36:	9b03      	ldr	r3, [sp, #12]
 8003b38:	1d19      	adds	r1, r3, #4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	9103      	str	r1, [sp, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bfbb      	ittet	lt
 8003b42:	425b      	neglt	r3, r3
 8003b44:	f042 0202 	orrlt.w	r2, r2, #2
 8003b48:	9307      	strge	r3, [sp, #28]
 8003b4a:	9307      	strlt	r3, [sp, #28]
 8003b4c:	bfb8      	it	lt
 8003b4e:	9204      	strlt	r2, [sp, #16]
 8003b50:	7823      	ldrb	r3, [r4, #0]
 8003b52:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b54:	d10a      	bne.n	8003b6c <_svfiprintf_r+0x130>
 8003b56:	7863      	ldrb	r3, [r4, #1]
 8003b58:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b5a:	d132      	bne.n	8003bc2 <_svfiprintf_r+0x186>
 8003b5c:	9b03      	ldr	r3, [sp, #12]
 8003b5e:	3402      	adds	r4, #2
 8003b60:	1d1a      	adds	r2, r3, #4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	9203      	str	r2, [sp, #12]
 8003b66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b6a:	9305      	str	r3, [sp, #20]
 8003b6c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003c24 <_svfiprintf_r+0x1e8>
 8003b70:	2203      	movs	r2, #3
 8003b72:	4650      	mov	r0, sl
 8003b74:	7821      	ldrb	r1, [r4, #0]
 8003b76:	f000 fc69 	bl	800444c <memchr>
 8003b7a:	b138      	cbz	r0, 8003b8c <_svfiprintf_r+0x150>
 8003b7c:	2240      	movs	r2, #64	@ 0x40
 8003b7e:	9b04      	ldr	r3, [sp, #16]
 8003b80:	eba0 000a 	sub.w	r0, r0, sl
 8003b84:	4082      	lsls	r2, r0
 8003b86:	4313      	orrs	r3, r2
 8003b88:	3401      	adds	r4, #1
 8003b8a:	9304      	str	r3, [sp, #16]
 8003b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b90:	2206      	movs	r2, #6
 8003b92:	4825      	ldr	r0, [pc, #148]	@ (8003c28 <_svfiprintf_r+0x1ec>)
 8003b94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b98:	f000 fc58 	bl	800444c <memchr>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d036      	beq.n	8003c0e <_svfiprintf_r+0x1d2>
 8003ba0:	4b22      	ldr	r3, [pc, #136]	@ (8003c2c <_svfiprintf_r+0x1f0>)
 8003ba2:	bb1b      	cbnz	r3, 8003bec <_svfiprintf_r+0x1b0>
 8003ba4:	9b03      	ldr	r3, [sp, #12]
 8003ba6:	3307      	adds	r3, #7
 8003ba8:	f023 0307 	bic.w	r3, r3, #7
 8003bac:	3308      	adds	r3, #8
 8003bae:	9303      	str	r3, [sp, #12]
 8003bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bb2:	4433      	add	r3, r6
 8003bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bb6:	e76a      	b.n	8003a8e <_svfiprintf_r+0x52>
 8003bb8:	460c      	mov	r4, r1
 8003bba:	2001      	movs	r0, #1
 8003bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bc0:	e7a8      	b.n	8003b14 <_svfiprintf_r+0xd8>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f04f 0c0a 	mov.w	ip, #10
 8003bc8:	4619      	mov	r1, r3
 8003bca:	3401      	adds	r4, #1
 8003bcc:	9305      	str	r3, [sp, #20]
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bd4:	3a30      	subs	r2, #48	@ 0x30
 8003bd6:	2a09      	cmp	r2, #9
 8003bd8:	d903      	bls.n	8003be2 <_svfiprintf_r+0x1a6>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0c6      	beq.n	8003b6c <_svfiprintf_r+0x130>
 8003bde:	9105      	str	r1, [sp, #20]
 8003be0:	e7c4      	b.n	8003b6c <_svfiprintf_r+0x130>
 8003be2:	4604      	mov	r4, r0
 8003be4:	2301      	movs	r3, #1
 8003be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bea:	e7f0      	b.n	8003bce <_svfiprintf_r+0x192>
 8003bec:	ab03      	add	r3, sp, #12
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	462a      	mov	r2, r5
 8003bf2:	4638      	mov	r0, r7
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c30 <_svfiprintf_r+0x1f4>)
 8003bf6:	a904      	add	r1, sp, #16
 8003bf8:	f3af 8000 	nop.w
 8003bfc:	1c42      	adds	r2, r0, #1
 8003bfe:	4606      	mov	r6, r0
 8003c00:	d1d6      	bne.n	8003bb0 <_svfiprintf_r+0x174>
 8003c02:	89ab      	ldrh	r3, [r5, #12]
 8003c04:	065b      	lsls	r3, r3, #25
 8003c06:	f53f af2d 	bmi.w	8003a64 <_svfiprintf_r+0x28>
 8003c0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c0c:	e72c      	b.n	8003a68 <_svfiprintf_r+0x2c>
 8003c0e:	ab03      	add	r3, sp, #12
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	462a      	mov	r2, r5
 8003c14:	4638      	mov	r0, r7
 8003c16:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <_svfiprintf_r+0x1f4>)
 8003c18:	a904      	add	r1, sp, #16
 8003c1a:	f000 f9bd 	bl	8003f98 <_printf_i>
 8003c1e:	e7ed      	b.n	8003bfc <_svfiprintf_r+0x1c0>
 8003c20:	08004d52 	.word	0x08004d52
 8003c24:	08004d58 	.word	0x08004d58
 8003c28:	08004d5c 	.word	0x08004d5c
 8003c2c:	00000000 	.word	0x00000000
 8003c30:	08003985 	.word	0x08003985

08003c34 <__sfputc_r>:
 8003c34:	6893      	ldr	r3, [r2, #8]
 8003c36:	b410      	push	{r4}
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	6093      	str	r3, [r2, #8]
 8003c3e:	da07      	bge.n	8003c50 <__sfputc_r+0x1c>
 8003c40:	6994      	ldr	r4, [r2, #24]
 8003c42:	42a3      	cmp	r3, r4
 8003c44:	db01      	blt.n	8003c4a <__sfputc_r+0x16>
 8003c46:	290a      	cmp	r1, #10
 8003c48:	d102      	bne.n	8003c50 <__sfputc_r+0x1c>
 8003c4a:	bc10      	pop	{r4}
 8003c4c:	f7ff bc6b 	b.w	8003526 <__swbuf_r>
 8003c50:	6813      	ldr	r3, [r2, #0]
 8003c52:	1c58      	adds	r0, r3, #1
 8003c54:	6010      	str	r0, [r2, #0]
 8003c56:	7019      	strb	r1, [r3, #0]
 8003c58:	4608      	mov	r0, r1
 8003c5a:	bc10      	pop	{r4}
 8003c5c:	4770      	bx	lr

08003c5e <__sfputs_r>:
 8003c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c60:	4606      	mov	r6, r0
 8003c62:	460f      	mov	r7, r1
 8003c64:	4614      	mov	r4, r2
 8003c66:	18d5      	adds	r5, r2, r3
 8003c68:	42ac      	cmp	r4, r5
 8003c6a:	d101      	bne.n	8003c70 <__sfputs_r+0x12>
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	e007      	b.n	8003c80 <__sfputs_r+0x22>
 8003c70:	463a      	mov	r2, r7
 8003c72:	4630      	mov	r0, r6
 8003c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c78:	f7ff ffdc 	bl	8003c34 <__sfputc_r>
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	d1f3      	bne.n	8003c68 <__sfputs_r+0xa>
 8003c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c84 <_vfiprintf_r>:
 8003c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c88:	460d      	mov	r5, r1
 8003c8a:	4614      	mov	r4, r2
 8003c8c:	4698      	mov	r8, r3
 8003c8e:	4606      	mov	r6, r0
 8003c90:	b09d      	sub	sp, #116	@ 0x74
 8003c92:	b118      	cbz	r0, 8003c9c <_vfiprintf_r+0x18>
 8003c94:	6a03      	ldr	r3, [r0, #32]
 8003c96:	b90b      	cbnz	r3, 8003c9c <_vfiprintf_r+0x18>
 8003c98:	f7ff fb3a 	bl	8003310 <__sinit>
 8003c9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c9e:	07d9      	lsls	r1, r3, #31
 8003ca0:	d405      	bmi.n	8003cae <_vfiprintf_r+0x2a>
 8003ca2:	89ab      	ldrh	r3, [r5, #12]
 8003ca4:	059a      	lsls	r2, r3, #22
 8003ca6:	d402      	bmi.n	8003cae <_vfiprintf_r+0x2a>
 8003ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003caa:	f7ff fd64 	bl	8003776 <__retarget_lock_acquire_recursive>
 8003cae:	89ab      	ldrh	r3, [r5, #12]
 8003cb0:	071b      	lsls	r3, r3, #28
 8003cb2:	d501      	bpl.n	8003cb8 <_vfiprintf_r+0x34>
 8003cb4:	692b      	ldr	r3, [r5, #16]
 8003cb6:	b99b      	cbnz	r3, 8003ce0 <_vfiprintf_r+0x5c>
 8003cb8:	4629      	mov	r1, r5
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f7ff fc72 	bl	80035a4 <__swsetup_r>
 8003cc0:	b170      	cbz	r0, 8003ce0 <_vfiprintf_r+0x5c>
 8003cc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003cc4:	07dc      	lsls	r4, r3, #31
 8003cc6:	d504      	bpl.n	8003cd2 <_vfiprintf_r+0x4e>
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	b01d      	add	sp, #116	@ 0x74
 8003cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd2:	89ab      	ldrh	r3, [r5, #12]
 8003cd4:	0598      	lsls	r0, r3, #22
 8003cd6:	d4f7      	bmi.n	8003cc8 <_vfiprintf_r+0x44>
 8003cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003cda:	f7ff fd4d 	bl	8003778 <__retarget_lock_release_recursive>
 8003cde:	e7f3      	b.n	8003cc8 <_vfiprintf_r+0x44>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003cea:	2330      	movs	r3, #48	@ 0x30
 8003cec:	f04f 0901 	mov.w	r9, #1
 8003cf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cf4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003ea0 <_vfiprintf_r+0x21c>
 8003cf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003cfc:	4623      	mov	r3, r4
 8003cfe:	469a      	mov	sl, r3
 8003d00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d04:	b10a      	cbz	r2, 8003d0a <_vfiprintf_r+0x86>
 8003d06:	2a25      	cmp	r2, #37	@ 0x25
 8003d08:	d1f9      	bne.n	8003cfe <_vfiprintf_r+0x7a>
 8003d0a:	ebba 0b04 	subs.w	fp, sl, r4
 8003d0e:	d00b      	beq.n	8003d28 <_vfiprintf_r+0xa4>
 8003d10:	465b      	mov	r3, fp
 8003d12:	4622      	mov	r2, r4
 8003d14:	4629      	mov	r1, r5
 8003d16:	4630      	mov	r0, r6
 8003d18:	f7ff ffa1 	bl	8003c5e <__sfputs_r>
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	f000 80a7 	beq.w	8003e70 <_vfiprintf_r+0x1ec>
 8003d22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d24:	445a      	add	r2, fp
 8003d26:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d28:	f89a 3000 	ldrb.w	r3, [sl]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 809f 	beq.w	8003e70 <_vfiprintf_r+0x1ec>
 8003d32:	2300      	movs	r3, #0
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295
 8003d38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d3c:	f10a 0a01 	add.w	sl, sl, #1
 8003d40:	9304      	str	r3, [sp, #16]
 8003d42:	9307      	str	r3, [sp, #28]
 8003d44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d48:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d4a:	4654      	mov	r4, sl
 8003d4c:	2205      	movs	r2, #5
 8003d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d52:	4853      	ldr	r0, [pc, #332]	@ (8003ea0 <_vfiprintf_r+0x21c>)
 8003d54:	f000 fb7a 	bl	800444c <memchr>
 8003d58:	9a04      	ldr	r2, [sp, #16]
 8003d5a:	b9d8      	cbnz	r0, 8003d94 <_vfiprintf_r+0x110>
 8003d5c:	06d1      	lsls	r1, r2, #27
 8003d5e:	bf44      	itt	mi
 8003d60:	2320      	movmi	r3, #32
 8003d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d66:	0713      	lsls	r3, r2, #28
 8003d68:	bf44      	itt	mi
 8003d6a:	232b      	movmi	r3, #43	@ 0x2b
 8003d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d70:	f89a 3000 	ldrb.w	r3, [sl]
 8003d74:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d76:	d015      	beq.n	8003da4 <_vfiprintf_r+0x120>
 8003d78:	4654      	mov	r4, sl
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	f04f 0c0a 	mov.w	ip, #10
 8003d80:	9a07      	ldr	r2, [sp, #28]
 8003d82:	4621      	mov	r1, r4
 8003d84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d88:	3b30      	subs	r3, #48	@ 0x30
 8003d8a:	2b09      	cmp	r3, #9
 8003d8c:	d94b      	bls.n	8003e26 <_vfiprintf_r+0x1a2>
 8003d8e:	b1b0      	cbz	r0, 8003dbe <_vfiprintf_r+0x13a>
 8003d90:	9207      	str	r2, [sp, #28]
 8003d92:	e014      	b.n	8003dbe <_vfiprintf_r+0x13a>
 8003d94:	eba0 0308 	sub.w	r3, r0, r8
 8003d98:	fa09 f303 	lsl.w	r3, r9, r3
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	46a2      	mov	sl, r4
 8003da0:	9304      	str	r3, [sp, #16]
 8003da2:	e7d2      	b.n	8003d4a <_vfiprintf_r+0xc6>
 8003da4:	9b03      	ldr	r3, [sp, #12]
 8003da6:	1d19      	adds	r1, r3, #4
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	9103      	str	r1, [sp, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	bfbb      	ittet	lt
 8003db0:	425b      	neglt	r3, r3
 8003db2:	f042 0202 	orrlt.w	r2, r2, #2
 8003db6:	9307      	strge	r3, [sp, #28]
 8003db8:	9307      	strlt	r3, [sp, #28]
 8003dba:	bfb8      	it	lt
 8003dbc:	9204      	strlt	r2, [sp, #16]
 8003dbe:	7823      	ldrb	r3, [r4, #0]
 8003dc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003dc2:	d10a      	bne.n	8003dda <_vfiprintf_r+0x156>
 8003dc4:	7863      	ldrb	r3, [r4, #1]
 8003dc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dc8:	d132      	bne.n	8003e30 <_vfiprintf_r+0x1ac>
 8003dca:	9b03      	ldr	r3, [sp, #12]
 8003dcc:	3402      	adds	r4, #2
 8003dce:	1d1a      	adds	r2, r3, #4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	9203      	str	r2, [sp, #12]
 8003dd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003dd8:	9305      	str	r3, [sp, #20]
 8003dda:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003ea4 <_vfiprintf_r+0x220>
 8003dde:	2203      	movs	r2, #3
 8003de0:	4650      	mov	r0, sl
 8003de2:	7821      	ldrb	r1, [r4, #0]
 8003de4:	f000 fb32 	bl	800444c <memchr>
 8003de8:	b138      	cbz	r0, 8003dfa <_vfiprintf_r+0x176>
 8003dea:	2240      	movs	r2, #64	@ 0x40
 8003dec:	9b04      	ldr	r3, [sp, #16]
 8003dee:	eba0 000a 	sub.w	r0, r0, sl
 8003df2:	4082      	lsls	r2, r0
 8003df4:	4313      	orrs	r3, r2
 8003df6:	3401      	adds	r4, #1
 8003df8:	9304      	str	r3, [sp, #16]
 8003dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dfe:	2206      	movs	r2, #6
 8003e00:	4829      	ldr	r0, [pc, #164]	@ (8003ea8 <_vfiprintf_r+0x224>)
 8003e02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e06:	f000 fb21 	bl	800444c <memchr>
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	d03f      	beq.n	8003e8e <_vfiprintf_r+0x20a>
 8003e0e:	4b27      	ldr	r3, [pc, #156]	@ (8003eac <_vfiprintf_r+0x228>)
 8003e10:	bb1b      	cbnz	r3, 8003e5a <_vfiprintf_r+0x1d6>
 8003e12:	9b03      	ldr	r3, [sp, #12]
 8003e14:	3307      	adds	r3, #7
 8003e16:	f023 0307 	bic.w	r3, r3, #7
 8003e1a:	3308      	adds	r3, #8
 8003e1c:	9303      	str	r3, [sp, #12]
 8003e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e20:	443b      	add	r3, r7
 8003e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e24:	e76a      	b.n	8003cfc <_vfiprintf_r+0x78>
 8003e26:	460c      	mov	r4, r1
 8003e28:	2001      	movs	r0, #1
 8003e2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e2e:	e7a8      	b.n	8003d82 <_vfiprintf_r+0xfe>
 8003e30:	2300      	movs	r3, #0
 8003e32:	f04f 0c0a 	mov.w	ip, #10
 8003e36:	4619      	mov	r1, r3
 8003e38:	3401      	adds	r4, #1
 8003e3a:	9305      	str	r3, [sp, #20]
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e42:	3a30      	subs	r2, #48	@ 0x30
 8003e44:	2a09      	cmp	r2, #9
 8003e46:	d903      	bls.n	8003e50 <_vfiprintf_r+0x1cc>
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0c6      	beq.n	8003dda <_vfiprintf_r+0x156>
 8003e4c:	9105      	str	r1, [sp, #20]
 8003e4e:	e7c4      	b.n	8003dda <_vfiprintf_r+0x156>
 8003e50:	4604      	mov	r4, r0
 8003e52:	2301      	movs	r3, #1
 8003e54:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e58:	e7f0      	b.n	8003e3c <_vfiprintf_r+0x1b8>
 8003e5a:	ab03      	add	r3, sp, #12
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	462a      	mov	r2, r5
 8003e60:	4630      	mov	r0, r6
 8003e62:	4b13      	ldr	r3, [pc, #76]	@ (8003eb0 <_vfiprintf_r+0x22c>)
 8003e64:	a904      	add	r1, sp, #16
 8003e66:	f3af 8000 	nop.w
 8003e6a:	4607      	mov	r7, r0
 8003e6c:	1c78      	adds	r0, r7, #1
 8003e6e:	d1d6      	bne.n	8003e1e <_vfiprintf_r+0x19a>
 8003e70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e72:	07d9      	lsls	r1, r3, #31
 8003e74:	d405      	bmi.n	8003e82 <_vfiprintf_r+0x1fe>
 8003e76:	89ab      	ldrh	r3, [r5, #12]
 8003e78:	059a      	lsls	r2, r3, #22
 8003e7a:	d402      	bmi.n	8003e82 <_vfiprintf_r+0x1fe>
 8003e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e7e:	f7ff fc7b 	bl	8003778 <__retarget_lock_release_recursive>
 8003e82:	89ab      	ldrh	r3, [r5, #12]
 8003e84:	065b      	lsls	r3, r3, #25
 8003e86:	f53f af1f 	bmi.w	8003cc8 <_vfiprintf_r+0x44>
 8003e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e8c:	e71e      	b.n	8003ccc <_vfiprintf_r+0x48>
 8003e8e:	ab03      	add	r3, sp, #12
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	462a      	mov	r2, r5
 8003e94:	4630      	mov	r0, r6
 8003e96:	4b06      	ldr	r3, [pc, #24]	@ (8003eb0 <_vfiprintf_r+0x22c>)
 8003e98:	a904      	add	r1, sp, #16
 8003e9a:	f000 f87d 	bl	8003f98 <_printf_i>
 8003e9e:	e7e4      	b.n	8003e6a <_vfiprintf_r+0x1e6>
 8003ea0:	08004d52 	.word	0x08004d52
 8003ea4:	08004d58 	.word	0x08004d58
 8003ea8:	08004d5c 	.word	0x08004d5c
 8003eac:	00000000 	.word	0x00000000
 8003eb0:	08003c5f 	.word	0x08003c5f

08003eb4 <_printf_common>:
 8003eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb8:	4616      	mov	r6, r2
 8003eba:	4698      	mov	r8, r3
 8003ebc:	688a      	ldr	r2, [r1, #8]
 8003ebe:	690b      	ldr	r3, [r1, #16]
 8003ec0:	4607      	mov	r7, r0
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	bfb8      	it	lt
 8003ec6:	4613      	movlt	r3, r2
 8003ec8:	6033      	str	r3, [r6, #0]
 8003eca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ece:	460c      	mov	r4, r1
 8003ed0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ed4:	b10a      	cbz	r2, 8003eda <_printf_common+0x26>
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	6033      	str	r3, [r6, #0]
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	0699      	lsls	r1, r3, #26
 8003ede:	bf42      	ittt	mi
 8003ee0:	6833      	ldrmi	r3, [r6, #0]
 8003ee2:	3302      	addmi	r3, #2
 8003ee4:	6033      	strmi	r3, [r6, #0]
 8003ee6:	6825      	ldr	r5, [r4, #0]
 8003ee8:	f015 0506 	ands.w	r5, r5, #6
 8003eec:	d106      	bne.n	8003efc <_printf_common+0x48>
 8003eee:	f104 0a19 	add.w	sl, r4, #25
 8003ef2:	68e3      	ldr	r3, [r4, #12]
 8003ef4:	6832      	ldr	r2, [r6, #0]
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	42ab      	cmp	r3, r5
 8003efa:	dc2b      	bgt.n	8003f54 <_printf_common+0xa0>
 8003efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f00:	6822      	ldr	r2, [r4, #0]
 8003f02:	3b00      	subs	r3, #0
 8003f04:	bf18      	it	ne
 8003f06:	2301      	movne	r3, #1
 8003f08:	0692      	lsls	r2, r2, #26
 8003f0a:	d430      	bmi.n	8003f6e <_printf_common+0xba>
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	4638      	mov	r0, r7
 8003f10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f14:	47c8      	blx	r9
 8003f16:	3001      	adds	r0, #1
 8003f18:	d023      	beq.n	8003f62 <_printf_common+0xae>
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	6922      	ldr	r2, [r4, #16]
 8003f1e:	f003 0306 	and.w	r3, r3, #6
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	bf14      	ite	ne
 8003f26:	2500      	movne	r5, #0
 8003f28:	6833      	ldreq	r3, [r6, #0]
 8003f2a:	f04f 0600 	mov.w	r6, #0
 8003f2e:	bf08      	it	eq
 8003f30:	68e5      	ldreq	r5, [r4, #12]
 8003f32:	f104 041a 	add.w	r4, r4, #26
 8003f36:	bf08      	it	eq
 8003f38:	1aed      	subeq	r5, r5, r3
 8003f3a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003f3e:	bf08      	it	eq
 8003f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f44:	4293      	cmp	r3, r2
 8003f46:	bfc4      	itt	gt
 8003f48:	1a9b      	subgt	r3, r3, r2
 8003f4a:	18ed      	addgt	r5, r5, r3
 8003f4c:	42b5      	cmp	r5, r6
 8003f4e:	d11a      	bne.n	8003f86 <_printf_common+0xd2>
 8003f50:	2000      	movs	r0, #0
 8003f52:	e008      	b.n	8003f66 <_printf_common+0xb2>
 8003f54:	2301      	movs	r3, #1
 8003f56:	4652      	mov	r2, sl
 8003f58:	4641      	mov	r1, r8
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	47c8      	blx	r9
 8003f5e:	3001      	adds	r0, #1
 8003f60:	d103      	bne.n	8003f6a <_printf_common+0xb6>
 8003f62:	f04f 30ff 	mov.w	r0, #4294967295
 8003f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f6a:	3501      	adds	r5, #1
 8003f6c:	e7c1      	b.n	8003ef2 <_printf_common+0x3e>
 8003f6e:	2030      	movs	r0, #48	@ 0x30
 8003f70:	18e1      	adds	r1, r4, r3
 8003f72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f7c:	4422      	add	r2, r4
 8003f7e:	3302      	adds	r3, #2
 8003f80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f84:	e7c2      	b.n	8003f0c <_printf_common+0x58>
 8003f86:	2301      	movs	r3, #1
 8003f88:	4622      	mov	r2, r4
 8003f8a:	4641      	mov	r1, r8
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	47c8      	blx	r9
 8003f90:	3001      	adds	r0, #1
 8003f92:	d0e6      	beq.n	8003f62 <_printf_common+0xae>
 8003f94:	3601      	adds	r6, #1
 8003f96:	e7d9      	b.n	8003f4c <_printf_common+0x98>

08003f98 <_printf_i>:
 8003f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f9c:	7e0f      	ldrb	r7, [r1, #24]
 8003f9e:	4691      	mov	r9, r2
 8003fa0:	2f78      	cmp	r7, #120	@ 0x78
 8003fa2:	4680      	mov	r8, r0
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	469a      	mov	sl, r3
 8003fa8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003faa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fae:	d807      	bhi.n	8003fc0 <_printf_i+0x28>
 8003fb0:	2f62      	cmp	r7, #98	@ 0x62
 8003fb2:	d80a      	bhi.n	8003fca <_printf_i+0x32>
 8003fb4:	2f00      	cmp	r7, #0
 8003fb6:	f000 80d1 	beq.w	800415c <_printf_i+0x1c4>
 8003fba:	2f58      	cmp	r7, #88	@ 0x58
 8003fbc:	f000 80b8 	beq.w	8004130 <_printf_i+0x198>
 8003fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003fc8:	e03a      	b.n	8004040 <_printf_i+0xa8>
 8003fca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003fce:	2b15      	cmp	r3, #21
 8003fd0:	d8f6      	bhi.n	8003fc0 <_printf_i+0x28>
 8003fd2:	a101      	add	r1, pc, #4	@ (adr r1, 8003fd8 <_printf_i+0x40>)
 8003fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fd8:	08004031 	.word	0x08004031
 8003fdc:	08004045 	.word	0x08004045
 8003fe0:	08003fc1 	.word	0x08003fc1
 8003fe4:	08003fc1 	.word	0x08003fc1
 8003fe8:	08003fc1 	.word	0x08003fc1
 8003fec:	08003fc1 	.word	0x08003fc1
 8003ff0:	08004045 	.word	0x08004045
 8003ff4:	08003fc1 	.word	0x08003fc1
 8003ff8:	08003fc1 	.word	0x08003fc1
 8003ffc:	08003fc1 	.word	0x08003fc1
 8004000:	08003fc1 	.word	0x08003fc1
 8004004:	08004143 	.word	0x08004143
 8004008:	0800406f 	.word	0x0800406f
 800400c:	080040fd 	.word	0x080040fd
 8004010:	08003fc1 	.word	0x08003fc1
 8004014:	08003fc1 	.word	0x08003fc1
 8004018:	08004165 	.word	0x08004165
 800401c:	08003fc1 	.word	0x08003fc1
 8004020:	0800406f 	.word	0x0800406f
 8004024:	08003fc1 	.word	0x08003fc1
 8004028:	08003fc1 	.word	0x08003fc1
 800402c:	08004105 	.word	0x08004105
 8004030:	6833      	ldr	r3, [r6, #0]
 8004032:	1d1a      	adds	r2, r3, #4
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6032      	str	r2, [r6, #0]
 8004038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800403c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004040:	2301      	movs	r3, #1
 8004042:	e09c      	b.n	800417e <_printf_i+0x1e6>
 8004044:	6833      	ldr	r3, [r6, #0]
 8004046:	6820      	ldr	r0, [r4, #0]
 8004048:	1d19      	adds	r1, r3, #4
 800404a:	6031      	str	r1, [r6, #0]
 800404c:	0606      	lsls	r6, r0, #24
 800404e:	d501      	bpl.n	8004054 <_printf_i+0xbc>
 8004050:	681d      	ldr	r5, [r3, #0]
 8004052:	e003      	b.n	800405c <_printf_i+0xc4>
 8004054:	0645      	lsls	r5, r0, #25
 8004056:	d5fb      	bpl.n	8004050 <_printf_i+0xb8>
 8004058:	f9b3 5000 	ldrsh.w	r5, [r3]
 800405c:	2d00      	cmp	r5, #0
 800405e:	da03      	bge.n	8004068 <_printf_i+0xd0>
 8004060:	232d      	movs	r3, #45	@ 0x2d
 8004062:	426d      	negs	r5, r5
 8004064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004068:	230a      	movs	r3, #10
 800406a:	4858      	ldr	r0, [pc, #352]	@ (80041cc <_printf_i+0x234>)
 800406c:	e011      	b.n	8004092 <_printf_i+0xfa>
 800406e:	6821      	ldr	r1, [r4, #0]
 8004070:	6833      	ldr	r3, [r6, #0]
 8004072:	0608      	lsls	r0, r1, #24
 8004074:	f853 5b04 	ldr.w	r5, [r3], #4
 8004078:	d402      	bmi.n	8004080 <_printf_i+0xe8>
 800407a:	0649      	lsls	r1, r1, #25
 800407c:	bf48      	it	mi
 800407e:	b2ad      	uxthmi	r5, r5
 8004080:	2f6f      	cmp	r7, #111	@ 0x6f
 8004082:	6033      	str	r3, [r6, #0]
 8004084:	bf14      	ite	ne
 8004086:	230a      	movne	r3, #10
 8004088:	2308      	moveq	r3, #8
 800408a:	4850      	ldr	r0, [pc, #320]	@ (80041cc <_printf_i+0x234>)
 800408c:	2100      	movs	r1, #0
 800408e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004092:	6866      	ldr	r6, [r4, #4]
 8004094:	2e00      	cmp	r6, #0
 8004096:	60a6      	str	r6, [r4, #8]
 8004098:	db05      	blt.n	80040a6 <_printf_i+0x10e>
 800409a:	6821      	ldr	r1, [r4, #0]
 800409c:	432e      	orrs	r6, r5
 800409e:	f021 0104 	bic.w	r1, r1, #4
 80040a2:	6021      	str	r1, [r4, #0]
 80040a4:	d04b      	beq.n	800413e <_printf_i+0x1a6>
 80040a6:	4616      	mov	r6, r2
 80040a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80040ac:	fb03 5711 	mls	r7, r3, r1, r5
 80040b0:	5dc7      	ldrb	r7, [r0, r7]
 80040b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040b6:	462f      	mov	r7, r5
 80040b8:	42bb      	cmp	r3, r7
 80040ba:	460d      	mov	r5, r1
 80040bc:	d9f4      	bls.n	80040a8 <_printf_i+0x110>
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d10b      	bne.n	80040da <_printf_i+0x142>
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	07df      	lsls	r7, r3, #31
 80040c6:	d508      	bpl.n	80040da <_printf_i+0x142>
 80040c8:	6923      	ldr	r3, [r4, #16]
 80040ca:	6861      	ldr	r1, [r4, #4]
 80040cc:	4299      	cmp	r1, r3
 80040ce:	bfde      	ittt	le
 80040d0:	2330      	movle	r3, #48	@ 0x30
 80040d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040da:	1b92      	subs	r2, r2, r6
 80040dc:	6122      	str	r2, [r4, #16]
 80040de:	464b      	mov	r3, r9
 80040e0:	4621      	mov	r1, r4
 80040e2:	4640      	mov	r0, r8
 80040e4:	f8cd a000 	str.w	sl, [sp]
 80040e8:	aa03      	add	r2, sp, #12
 80040ea:	f7ff fee3 	bl	8003eb4 <_printf_common>
 80040ee:	3001      	adds	r0, #1
 80040f0:	d14a      	bne.n	8004188 <_printf_i+0x1f0>
 80040f2:	f04f 30ff 	mov.w	r0, #4294967295
 80040f6:	b004      	add	sp, #16
 80040f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	f043 0320 	orr.w	r3, r3, #32
 8004102:	6023      	str	r3, [r4, #0]
 8004104:	2778      	movs	r7, #120	@ 0x78
 8004106:	4832      	ldr	r0, [pc, #200]	@ (80041d0 <_printf_i+0x238>)
 8004108:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	6831      	ldr	r1, [r6, #0]
 8004110:	061f      	lsls	r7, r3, #24
 8004112:	f851 5b04 	ldr.w	r5, [r1], #4
 8004116:	d402      	bmi.n	800411e <_printf_i+0x186>
 8004118:	065f      	lsls	r7, r3, #25
 800411a:	bf48      	it	mi
 800411c:	b2ad      	uxthmi	r5, r5
 800411e:	6031      	str	r1, [r6, #0]
 8004120:	07d9      	lsls	r1, r3, #31
 8004122:	bf44      	itt	mi
 8004124:	f043 0320 	orrmi.w	r3, r3, #32
 8004128:	6023      	strmi	r3, [r4, #0]
 800412a:	b11d      	cbz	r5, 8004134 <_printf_i+0x19c>
 800412c:	2310      	movs	r3, #16
 800412e:	e7ad      	b.n	800408c <_printf_i+0xf4>
 8004130:	4826      	ldr	r0, [pc, #152]	@ (80041cc <_printf_i+0x234>)
 8004132:	e7e9      	b.n	8004108 <_printf_i+0x170>
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	f023 0320 	bic.w	r3, r3, #32
 800413a:	6023      	str	r3, [r4, #0]
 800413c:	e7f6      	b.n	800412c <_printf_i+0x194>
 800413e:	4616      	mov	r6, r2
 8004140:	e7bd      	b.n	80040be <_printf_i+0x126>
 8004142:	6833      	ldr	r3, [r6, #0]
 8004144:	6825      	ldr	r5, [r4, #0]
 8004146:	1d18      	adds	r0, r3, #4
 8004148:	6961      	ldr	r1, [r4, #20]
 800414a:	6030      	str	r0, [r6, #0]
 800414c:	062e      	lsls	r6, r5, #24
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	d501      	bpl.n	8004156 <_printf_i+0x1be>
 8004152:	6019      	str	r1, [r3, #0]
 8004154:	e002      	b.n	800415c <_printf_i+0x1c4>
 8004156:	0668      	lsls	r0, r5, #25
 8004158:	d5fb      	bpl.n	8004152 <_printf_i+0x1ba>
 800415a:	8019      	strh	r1, [r3, #0]
 800415c:	2300      	movs	r3, #0
 800415e:	4616      	mov	r6, r2
 8004160:	6123      	str	r3, [r4, #16]
 8004162:	e7bc      	b.n	80040de <_printf_i+0x146>
 8004164:	6833      	ldr	r3, [r6, #0]
 8004166:	2100      	movs	r1, #0
 8004168:	1d1a      	adds	r2, r3, #4
 800416a:	6032      	str	r2, [r6, #0]
 800416c:	681e      	ldr	r6, [r3, #0]
 800416e:	6862      	ldr	r2, [r4, #4]
 8004170:	4630      	mov	r0, r6
 8004172:	f000 f96b 	bl	800444c <memchr>
 8004176:	b108      	cbz	r0, 800417c <_printf_i+0x1e4>
 8004178:	1b80      	subs	r0, r0, r6
 800417a:	6060      	str	r0, [r4, #4]
 800417c:	6863      	ldr	r3, [r4, #4]
 800417e:	6123      	str	r3, [r4, #16]
 8004180:	2300      	movs	r3, #0
 8004182:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004186:	e7aa      	b.n	80040de <_printf_i+0x146>
 8004188:	4632      	mov	r2, r6
 800418a:	4649      	mov	r1, r9
 800418c:	4640      	mov	r0, r8
 800418e:	6923      	ldr	r3, [r4, #16]
 8004190:	47d0      	blx	sl
 8004192:	3001      	adds	r0, #1
 8004194:	d0ad      	beq.n	80040f2 <_printf_i+0x15a>
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	079b      	lsls	r3, r3, #30
 800419a:	d413      	bmi.n	80041c4 <_printf_i+0x22c>
 800419c:	68e0      	ldr	r0, [r4, #12]
 800419e:	9b03      	ldr	r3, [sp, #12]
 80041a0:	4298      	cmp	r0, r3
 80041a2:	bfb8      	it	lt
 80041a4:	4618      	movlt	r0, r3
 80041a6:	e7a6      	b.n	80040f6 <_printf_i+0x15e>
 80041a8:	2301      	movs	r3, #1
 80041aa:	4632      	mov	r2, r6
 80041ac:	4649      	mov	r1, r9
 80041ae:	4640      	mov	r0, r8
 80041b0:	47d0      	blx	sl
 80041b2:	3001      	adds	r0, #1
 80041b4:	d09d      	beq.n	80040f2 <_printf_i+0x15a>
 80041b6:	3501      	adds	r5, #1
 80041b8:	68e3      	ldr	r3, [r4, #12]
 80041ba:	9903      	ldr	r1, [sp, #12]
 80041bc:	1a5b      	subs	r3, r3, r1
 80041be:	42ab      	cmp	r3, r5
 80041c0:	dcf2      	bgt.n	80041a8 <_printf_i+0x210>
 80041c2:	e7eb      	b.n	800419c <_printf_i+0x204>
 80041c4:	2500      	movs	r5, #0
 80041c6:	f104 0619 	add.w	r6, r4, #25
 80041ca:	e7f5      	b.n	80041b8 <_printf_i+0x220>
 80041cc:	08004d63 	.word	0x08004d63
 80041d0:	08004d74 	.word	0x08004d74

080041d4 <__sflush_r>:
 80041d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	0716      	lsls	r6, r2, #28
 80041dc:	4605      	mov	r5, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	d454      	bmi.n	800428c <__sflush_r+0xb8>
 80041e2:	684b      	ldr	r3, [r1, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	dc02      	bgt.n	80041ee <__sflush_r+0x1a>
 80041e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	dd48      	ble.n	8004280 <__sflush_r+0xac>
 80041ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80041f0:	2e00      	cmp	r6, #0
 80041f2:	d045      	beq.n	8004280 <__sflush_r+0xac>
 80041f4:	2300      	movs	r3, #0
 80041f6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80041fa:	682f      	ldr	r7, [r5, #0]
 80041fc:	6a21      	ldr	r1, [r4, #32]
 80041fe:	602b      	str	r3, [r5, #0]
 8004200:	d030      	beq.n	8004264 <__sflush_r+0x90>
 8004202:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004204:	89a3      	ldrh	r3, [r4, #12]
 8004206:	0759      	lsls	r1, r3, #29
 8004208:	d505      	bpl.n	8004216 <__sflush_r+0x42>
 800420a:	6863      	ldr	r3, [r4, #4]
 800420c:	1ad2      	subs	r2, r2, r3
 800420e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004210:	b10b      	cbz	r3, 8004216 <__sflush_r+0x42>
 8004212:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004214:	1ad2      	subs	r2, r2, r3
 8004216:	2300      	movs	r3, #0
 8004218:	4628      	mov	r0, r5
 800421a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800421c:	6a21      	ldr	r1, [r4, #32]
 800421e:	47b0      	blx	r6
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	d106      	bne.n	8004234 <__sflush_r+0x60>
 8004226:	6829      	ldr	r1, [r5, #0]
 8004228:	291d      	cmp	r1, #29
 800422a:	d82b      	bhi.n	8004284 <__sflush_r+0xb0>
 800422c:	4a28      	ldr	r2, [pc, #160]	@ (80042d0 <__sflush_r+0xfc>)
 800422e:	40ca      	lsrs	r2, r1
 8004230:	07d6      	lsls	r6, r2, #31
 8004232:	d527      	bpl.n	8004284 <__sflush_r+0xb0>
 8004234:	2200      	movs	r2, #0
 8004236:	6062      	str	r2, [r4, #4]
 8004238:	6922      	ldr	r2, [r4, #16]
 800423a:	04d9      	lsls	r1, r3, #19
 800423c:	6022      	str	r2, [r4, #0]
 800423e:	d504      	bpl.n	800424a <__sflush_r+0x76>
 8004240:	1c42      	adds	r2, r0, #1
 8004242:	d101      	bne.n	8004248 <__sflush_r+0x74>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	b903      	cbnz	r3, 800424a <__sflush_r+0x76>
 8004248:	6560      	str	r0, [r4, #84]	@ 0x54
 800424a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800424c:	602f      	str	r7, [r5, #0]
 800424e:	b1b9      	cbz	r1, 8004280 <__sflush_r+0xac>
 8004250:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004254:	4299      	cmp	r1, r3
 8004256:	d002      	beq.n	800425e <__sflush_r+0x8a>
 8004258:	4628      	mov	r0, r5
 800425a:	f7ff fa9d 	bl	8003798 <_free_r>
 800425e:	2300      	movs	r3, #0
 8004260:	6363      	str	r3, [r4, #52]	@ 0x34
 8004262:	e00d      	b.n	8004280 <__sflush_r+0xac>
 8004264:	2301      	movs	r3, #1
 8004266:	4628      	mov	r0, r5
 8004268:	47b0      	blx	r6
 800426a:	4602      	mov	r2, r0
 800426c:	1c50      	adds	r0, r2, #1
 800426e:	d1c9      	bne.n	8004204 <__sflush_r+0x30>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0c6      	beq.n	8004204 <__sflush_r+0x30>
 8004276:	2b1d      	cmp	r3, #29
 8004278:	d001      	beq.n	800427e <__sflush_r+0xaa>
 800427a:	2b16      	cmp	r3, #22
 800427c:	d11d      	bne.n	80042ba <__sflush_r+0xe6>
 800427e:	602f      	str	r7, [r5, #0]
 8004280:	2000      	movs	r0, #0
 8004282:	e021      	b.n	80042c8 <__sflush_r+0xf4>
 8004284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004288:	b21b      	sxth	r3, r3
 800428a:	e01a      	b.n	80042c2 <__sflush_r+0xee>
 800428c:	690f      	ldr	r7, [r1, #16]
 800428e:	2f00      	cmp	r7, #0
 8004290:	d0f6      	beq.n	8004280 <__sflush_r+0xac>
 8004292:	0793      	lsls	r3, r2, #30
 8004294:	bf18      	it	ne
 8004296:	2300      	movne	r3, #0
 8004298:	680e      	ldr	r6, [r1, #0]
 800429a:	bf08      	it	eq
 800429c:	694b      	ldreq	r3, [r1, #20]
 800429e:	1bf6      	subs	r6, r6, r7
 80042a0:	600f      	str	r7, [r1, #0]
 80042a2:	608b      	str	r3, [r1, #8]
 80042a4:	2e00      	cmp	r6, #0
 80042a6:	ddeb      	ble.n	8004280 <__sflush_r+0xac>
 80042a8:	4633      	mov	r3, r6
 80042aa:	463a      	mov	r2, r7
 80042ac:	4628      	mov	r0, r5
 80042ae:	6a21      	ldr	r1, [r4, #32]
 80042b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80042b4:	47e0      	blx	ip
 80042b6:	2800      	cmp	r0, #0
 80042b8:	dc07      	bgt.n	80042ca <__sflush_r+0xf6>
 80042ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042c2:	f04f 30ff 	mov.w	r0, #4294967295
 80042c6:	81a3      	strh	r3, [r4, #12]
 80042c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042ca:	4407      	add	r7, r0
 80042cc:	1a36      	subs	r6, r6, r0
 80042ce:	e7e9      	b.n	80042a4 <__sflush_r+0xd0>
 80042d0:	20400001 	.word	0x20400001

080042d4 <_fflush_r>:
 80042d4:	b538      	push	{r3, r4, r5, lr}
 80042d6:	690b      	ldr	r3, [r1, #16]
 80042d8:	4605      	mov	r5, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	b913      	cbnz	r3, 80042e4 <_fflush_r+0x10>
 80042de:	2500      	movs	r5, #0
 80042e0:	4628      	mov	r0, r5
 80042e2:	bd38      	pop	{r3, r4, r5, pc}
 80042e4:	b118      	cbz	r0, 80042ee <_fflush_r+0x1a>
 80042e6:	6a03      	ldr	r3, [r0, #32]
 80042e8:	b90b      	cbnz	r3, 80042ee <_fflush_r+0x1a>
 80042ea:	f7ff f811 	bl	8003310 <__sinit>
 80042ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f3      	beq.n	80042de <_fflush_r+0xa>
 80042f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80042f8:	07d0      	lsls	r0, r2, #31
 80042fa:	d404      	bmi.n	8004306 <_fflush_r+0x32>
 80042fc:	0599      	lsls	r1, r3, #22
 80042fe:	d402      	bmi.n	8004306 <_fflush_r+0x32>
 8004300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004302:	f7ff fa38 	bl	8003776 <__retarget_lock_acquire_recursive>
 8004306:	4628      	mov	r0, r5
 8004308:	4621      	mov	r1, r4
 800430a:	f7ff ff63 	bl	80041d4 <__sflush_r>
 800430e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004310:	4605      	mov	r5, r0
 8004312:	07da      	lsls	r2, r3, #31
 8004314:	d4e4      	bmi.n	80042e0 <_fflush_r+0xc>
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	059b      	lsls	r3, r3, #22
 800431a:	d4e1      	bmi.n	80042e0 <_fflush_r+0xc>
 800431c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800431e:	f7ff fa2b 	bl	8003778 <__retarget_lock_release_recursive>
 8004322:	e7dd      	b.n	80042e0 <_fflush_r+0xc>

08004324 <__swhatbuf_r>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	460c      	mov	r4, r1
 8004328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800432c:	4615      	mov	r5, r2
 800432e:	2900      	cmp	r1, #0
 8004330:	461e      	mov	r6, r3
 8004332:	b096      	sub	sp, #88	@ 0x58
 8004334:	da0c      	bge.n	8004350 <__swhatbuf_r+0x2c>
 8004336:	89a3      	ldrh	r3, [r4, #12]
 8004338:	2100      	movs	r1, #0
 800433a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800433e:	bf14      	ite	ne
 8004340:	2340      	movne	r3, #64	@ 0x40
 8004342:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004346:	2000      	movs	r0, #0
 8004348:	6031      	str	r1, [r6, #0]
 800434a:	602b      	str	r3, [r5, #0]
 800434c:	b016      	add	sp, #88	@ 0x58
 800434e:	bd70      	pop	{r4, r5, r6, pc}
 8004350:	466a      	mov	r2, sp
 8004352:	f000 f849 	bl	80043e8 <_fstat_r>
 8004356:	2800      	cmp	r0, #0
 8004358:	dbed      	blt.n	8004336 <__swhatbuf_r+0x12>
 800435a:	9901      	ldr	r1, [sp, #4]
 800435c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004360:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004364:	4259      	negs	r1, r3
 8004366:	4159      	adcs	r1, r3
 8004368:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800436c:	e7eb      	b.n	8004346 <__swhatbuf_r+0x22>

0800436e <__smakebuf_r>:
 800436e:	898b      	ldrh	r3, [r1, #12]
 8004370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004372:	079d      	lsls	r5, r3, #30
 8004374:	4606      	mov	r6, r0
 8004376:	460c      	mov	r4, r1
 8004378:	d507      	bpl.n	800438a <__smakebuf_r+0x1c>
 800437a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800437e:	6023      	str	r3, [r4, #0]
 8004380:	6123      	str	r3, [r4, #16]
 8004382:	2301      	movs	r3, #1
 8004384:	6163      	str	r3, [r4, #20]
 8004386:	b003      	add	sp, #12
 8004388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800438a:	466a      	mov	r2, sp
 800438c:	ab01      	add	r3, sp, #4
 800438e:	f7ff ffc9 	bl	8004324 <__swhatbuf_r>
 8004392:	9f00      	ldr	r7, [sp, #0]
 8004394:	4605      	mov	r5, r0
 8004396:	4639      	mov	r1, r7
 8004398:	4630      	mov	r0, r6
 800439a:	f7ff fa67 	bl	800386c <_malloc_r>
 800439e:	b948      	cbnz	r0, 80043b4 <__smakebuf_r+0x46>
 80043a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043a4:	059a      	lsls	r2, r3, #22
 80043a6:	d4ee      	bmi.n	8004386 <__smakebuf_r+0x18>
 80043a8:	f023 0303 	bic.w	r3, r3, #3
 80043ac:	f043 0302 	orr.w	r3, r3, #2
 80043b0:	81a3      	strh	r3, [r4, #12]
 80043b2:	e7e2      	b.n	800437a <__smakebuf_r+0xc>
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80043ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043be:	81a3      	strh	r3, [r4, #12]
 80043c0:	9b01      	ldr	r3, [sp, #4]
 80043c2:	6020      	str	r0, [r4, #0]
 80043c4:	b15b      	cbz	r3, 80043de <__smakebuf_r+0x70>
 80043c6:	4630      	mov	r0, r6
 80043c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043cc:	f000 f81e 	bl	800440c <_isatty_r>
 80043d0:	b128      	cbz	r0, 80043de <__smakebuf_r+0x70>
 80043d2:	89a3      	ldrh	r3, [r4, #12]
 80043d4:	f023 0303 	bic.w	r3, r3, #3
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	81a3      	strh	r3, [r4, #12]
 80043de:	89a3      	ldrh	r3, [r4, #12]
 80043e0:	431d      	orrs	r5, r3
 80043e2:	81a5      	strh	r5, [r4, #12]
 80043e4:	e7cf      	b.n	8004386 <__smakebuf_r+0x18>
	...

080043e8 <_fstat_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	2300      	movs	r3, #0
 80043ec:	4d06      	ldr	r5, [pc, #24]	@ (8004408 <_fstat_r+0x20>)
 80043ee:	4604      	mov	r4, r0
 80043f0:	4608      	mov	r0, r1
 80043f2:	4611      	mov	r1, r2
 80043f4:	602b      	str	r3, [r5, #0]
 80043f6:	f7fc fd8c 	bl	8000f12 <_fstat>
 80043fa:	1c43      	adds	r3, r0, #1
 80043fc:	d102      	bne.n	8004404 <_fstat_r+0x1c>
 80043fe:	682b      	ldr	r3, [r5, #0]
 8004400:	b103      	cbz	r3, 8004404 <_fstat_r+0x1c>
 8004402:	6023      	str	r3, [r4, #0]
 8004404:	bd38      	pop	{r3, r4, r5, pc}
 8004406:	bf00      	nop
 8004408:	200006c8 	.word	0x200006c8

0800440c <_isatty_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	2300      	movs	r3, #0
 8004410:	4d05      	ldr	r5, [pc, #20]	@ (8004428 <_isatty_r+0x1c>)
 8004412:	4604      	mov	r4, r0
 8004414:	4608      	mov	r0, r1
 8004416:	602b      	str	r3, [r5, #0]
 8004418:	f7fc fd8a 	bl	8000f30 <_isatty>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d102      	bne.n	8004426 <_isatty_r+0x1a>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	b103      	cbz	r3, 8004426 <_isatty_r+0x1a>
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	bd38      	pop	{r3, r4, r5, pc}
 8004428:	200006c8 	.word	0x200006c8

0800442c <_sbrk_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	2300      	movs	r3, #0
 8004430:	4d05      	ldr	r5, [pc, #20]	@ (8004448 <_sbrk_r+0x1c>)
 8004432:	4604      	mov	r4, r0
 8004434:	4608      	mov	r0, r1
 8004436:	602b      	str	r3, [r5, #0]
 8004438:	f7fc fd90 	bl	8000f5c <_sbrk>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d102      	bne.n	8004446 <_sbrk_r+0x1a>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	b103      	cbz	r3, 8004446 <_sbrk_r+0x1a>
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	200006c8 	.word	0x200006c8

0800444c <memchr>:
 800444c:	4603      	mov	r3, r0
 800444e:	b510      	push	{r4, lr}
 8004450:	b2c9      	uxtb	r1, r1
 8004452:	4402      	add	r2, r0
 8004454:	4293      	cmp	r3, r2
 8004456:	4618      	mov	r0, r3
 8004458:	d101      	bne.n	800445e <memchr+0x12>
 800445a:	2000      	movs	r0, #0
 800445c:	e003      	b.n	8004466 <memchr+0x1a>
 800445e:	7804      	ldrb	r4, [r0, #0]
 8004460:	3301      	adds	r3, #1
 8004462:	428c      	cmp	r4, r1
 8004464:	d1f6      	bne.n	8004454 <memchr+0x8>
 8004466:	bd10      	pop	{r4, pc}

08004468 <_realloc_r>:
 8004468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800446c:	4607      	mov	r7, r0
 800446e:	4614      	mov	r4, r2
 8004470:	460d      	mov	r5, r1
 8004472:	b921      	cbnz	r1, 800447e <_realloc_r+0x16>
 8004474:	4611      	mov	r1, r2
 8004476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800447a:	f7ff b9f7 	b.w	800386c <_malloc_r>
 800447e:	b92a      	cbnz	r2, 800448c <_realloc_r+0x24>
 8004480:	f7ff f98a 	bl	8003798 <_free_r>
 8004484:	4625      	mov	r5, r4
 8004486:	4628      	mov	r0, r5
 8004488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800448c:	f000 f81a 	bl	80044c4 <_malloc_usable_size_r>
 8004490:	4284      	cmp	r4, r0
 8004492:	4606      	mov	r6, r0
 8004494:	d802      	bhi.n	800449c <_realloc_r+0x34>
 8004496:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800449a:	d8f4      	bhi.n	8004486 <_realloc_r+0x1e>
 800449c:	4621      	mov	r1, r4
 800449e:	4638      	mov	r0, r7
 80044a0:	f7ff f9e4 	bl	800386c <_malloc_r>
 80044a4:	4680      	mov	r8, r0
 80044a6:	b908      	cbnz	r0, 80044ac <_realloc_r+0x44>
 80044a8:	4645      	mov	r5, r8
 80044aa:	e7ec      	b.n	8004486 <_realloc_r+0x1e>
 80044ac:	42b4      	cmp	r4, r6
 80044ae:	4622      	mov	r2, r4
 80044b0:	4629      	mov	r1, r5
 80044b2:	bf28      	it	cs
 80044b4:	4632      	movcs	r2, r6
 80044b6:	f7ff f960 	bl	800377a <memcpy>
 80044ba:	4629      	mov	r1, r5
 80044bc:	4638      	mov	r0, r7
 80044be:	f7ff f96b 	bl	8003798 <_free_r>
 80044c2:	e7f1      	b.n	80044a8 <_realloc_r+0x40>

080044c4 <_malloc_usable_size_r>:
 80044c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c8:	1f18      	subs	r0, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	bfbc      	itt	lt
 80044ce:	580b      	ldrlt	r3, [r1, r0]
 80044d0:	18c0      	addlt	r0, r0, r3
 80044d2:	4770      	bx	lr

080044d4 <_init>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr

080044e0 <_fini>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr
